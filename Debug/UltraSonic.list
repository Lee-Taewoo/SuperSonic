
UltraSonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e84  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006024  08006024  00007024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006080  08006080  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006080  08006080  00007080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006088  08006088  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006088  08006088  00007088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800608c  0800608c  0000708c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006090  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  20000068  080060f8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  080060f8  00008374  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef85  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a0  00000000  00000000  0001701d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  000194c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a91  00000000  00000000  0001a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e1e  00000000  00000000  0001acf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a8f  00000000  00000000  00032b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000901c3  00000000  00000000  0004359e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3761  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ec  00000000  00000000  000d37a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d7890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800600c 	.word	0x0800600c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	0800600c 	.word	0x0800600c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96a 	b.w	8000d48 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	460c      	mov	r4, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d14e      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a98:	4694      	mov	ip, r2
 8000a9a:	458c      	cmp	ip, r1
 8000a9c:	4686      	mov	lr, r0
 8000a9e:	fab2 f282 	clz	r2, r2
 8000aa2:	d962      	bls.n	8000b6a <__udivmoddi4+0xde>
 8000aa4:	b14a      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa6:	f1c2 0320 	rsb	r3, r2, #32
 8000aaa:	4091      	lsls	r1, r2
 8000aac:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab4:	4319      	orrs	r1, r3
 8000ab6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000abe:	fa1f f68c 	uxth.w	r6, ip
 8000ac2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ac6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aca:	fb07 1114 	mls	r1, r7, r4, r1
 8000ace:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad2:	fb04 f106 	mul.w	r1, r4, r6
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ae2:	f080 8112 	bcs.w	8000d0a <__udivmoddi4+0x27e>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 810f 	bls.w	8000d0a <__udivmoddi4+0x27e>
 8000aec:	3c02      	subs	r4, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a59      	subs	r1, r3, r1
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000afa:	fb07 1110 	mls	r1, r7, r0, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb00 f606 	mul.w	r6, r0, r6
 8000b06:	429e      	cmp	r6, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x94>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b12:	f080 80fc 	bcs.w	8000d0e <__udivmoddi4+0x282>
 8000b16:	429e      	cmp	r6, r3
 8000b18:	f240 80f9 	bls.w	8000d0e <__udivmoddi4+0x282>
 8000b1c:	4463      	add	r3, ip
 8000b1e:	3802      	subs	r0, #2
 8000b20:	1b9b      	subs	r3, r3, r6
 8000b22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b26:	2100      	movs	r1, #0
 8000b28:	b11d      	cbz	r5, 8000b32 <__udivmoddi4+0xa6>
 8000b2a:	40d3      	lsrs	r3, r2
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d905      	bls.n	8000b46 <__udivmoddi4+0xba>
 8000b3a:	b10d      	cbz	r5, 8000b40 <__udivmoddi4+0xb4>
 8000b3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b40:	2100      	movs	r1, #0
 8000b42:	4608      	mov	r0, r1
 8000b44:	e7f5      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b46:	fab3 f183 	clz	r1, r3
 8000b4a:	2900      	cmp	r1, #0
 8000b4c:	d146      	bne.n	8000bdc <__udivmoddi4+0x150>
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	d302      	bcc.n	8000b58 <__udivmoddi4+0xcc>
 8000b52:	4290      	cmp	r0, r2
 8000b54:	f0c0 80f0 	bcc.w	8000d38 <__udivmoddi4+0x2ac>
 8000b58:	1a86      	subs	r6, r0, r2
 8000b5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b5e:	2001      	movs	r0, #1
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d0e6      	beq.n	8000b32 <__udivmoddi4+0xa6>
 8000b64:	e9c5 6300 	strd	r6, r3, [r5]
 8000b68:	e7e3      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000b6a:	2a00      	cmp	r2, #0
 8000b6c:	f040 8090 	bne.w	8000c90 <__udivmoddi4+0x204>
 8000b70:	eba1 040c 	sub.w	r4, r1, ip
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	fa1f f78c 	uxth.w	r7, ip
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b86:	fb08 4416 	mls	r4, r8, r6, r4
 8000b8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b8e:	fb07 f006 	mul.w	r0, r7, r6
 8000b92:	4298      	cmp	r0, r3
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x11c>
 8000b96:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x11a>
 8000ba0:	4298      	cmp	r0, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000ba6:	4626      	mov	r6, r4
 8000ba8:	1a1c      	subs	r4, r3, r0
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bb2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bba:	fb00 f707 	mul.w	r7, r0, r7
 8000bbe:	429f      	cmp	r7, r3
 8000bc0:	d908      	bls.n	8000bd4 <__udivmoddi4+0x148>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bca:	d202      	bcs.n	8000bd2 <__udivmoddi4+0x146>
 8000bcc:	429f      	cmp	r7, r3
 8000bce:	f200 80b0 	bhi.w	8000d32 <__udivmoddi4+0x2a6>
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	1bdb      	subs	r3, r3, r7
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	e7a5      	b.n	8000b28 <__udivmoddi4+0x9c>
 8000bdc:	f1c1 0620 	rsb	r6, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 f706 	lsr.w	r7, r2, r6
 8000be6:	431f      	orrs	r7, r3
 8000be8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bec:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf0:	ea43 030c 	orr.w	r3, r3, ip
 8000bf4:	40f4      	lsrs	r4, r6
 8000bf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000bfa:	0c38      	lsrs	r0, r7, #16
 8000bfc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c00:	fbb4 fef0 	udiv	lr, r4, r0
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fb00 441e 	mls	r4, r0, lr, r4
 8000c0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c10:	fb0e f90c 	mul.w	r9, lr, ip
 8000c14:	45a1      	cmp	r9, r4
 8000c16:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1a:	d90a      	bls.n	8000c32 <__udivmoddi4+0x1a6>
 8000c1c:	193c      	adds	r4, r7, r4
 8000c1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c22:	f080 8084 	bcs.w	8000d2e <__udivmoddi4+0x2a2>
 8000c26:	45a1      	cmp	r9, r4
 8000c28:	f240 8081 	bls.w	8000d2e <__udivmoddi4+0x2a2>
 8000c2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c30:	443c      	add	r4, r7
 8000c32:	eba4 0409 	sub.w	r4, r4, r9
 8000c36:	fa1f f983 	uxth.w	r9, r3
 8000c3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c4a:	45a4      	cmp	ip, r4
 8000c4c:	d907      	bls.n	8000c5e <__udivmoddi4+0x1d2>
 8000c4e:	193c      	adds	r4, r7, r4
 8000c50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c54:	d267      	bcs.n	8000d26 <__udivmoddi4+0x29a>
 8000c56:	45a4      	cmp	ip, r4
 8000c58:	d965      	bls.n	8000d26 <__udivmoddi4+0x29a>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c62:	fba0 9302 	umull	r9, r3, r0, r2
 8000c66:	eba4 040c 	sub.w	r4, r4, ip
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	46ce      	mov	lr, r9
 8000c6e:	469c      	mov	ip, r3
 8000c70:	d351      	bcc.n	8000d16 <__udivmoddi4+0x28a>
 8000c72:	d04e      	beq.n	8000d12 <__udivmoddi4+0x286>
 8000c74:	b155      	cbz	r5, 8000c8c <__udivmoddi4+0x200>
 8000c76:	ebb8 030e 	subs.w	r3, r8, lr
 8000c7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c82:	40cb      	lsrs	r3, r1
 8000c84:	431e      	orrs	r6, r3
 8000c86:	40cc      	lsrs	r4, r1
 8000c88:	e9c5 6400 	strd	r6, r4, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e750      	b.n	8000b32 <__udivmoddi4+0xa6>
 8000c90:	f1c2 0320 	rsb	r3, r2, #32
 8000c94:	fa20 f103 	lsr.w	r1, r0, r3
 8000c98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca0:	4094      	lsls	r4, r2
 8000ca2:	430c      	orrs	r4, r1
 8000ca4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ca8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb00 f107 	mul.w	r1, r0, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x24c>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cce:	d22c      	bcs.n	8000d2a <__udivmoddi4+0x29e>
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d92a      	bls.n	8000d2a <__udivmoddi4+0x29e>
 8000cd4:	3802      	subs	r0, #2
 8000cd6:	4463      	add	r3, ip
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb01 f307 	mul.w	r3, r1, r7
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x276>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000cf8:	d213      	bcs.n	8000d22 <__udivmoddi4+0x296>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d911      	bls.n	8000d22 <__udivmoddi4+0x296>
 8000cfe:	3902      	subs	r1, #2
 8000d00:	4464      	add	r4, ip
 8000d02:	1ae4      	subs	r4, r4, r3
 8000d04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d08:	e739      	b.n	8000b7e <__udivmoddi4+0xf2>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	e6f0      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e706      	b.n	8000b20 <__udivmoddi4+0x94>
 8000d12:	45c8      	cmp	r8, r9
 8000d14:	d2ae      	bcs.n	8000c74 <__udivmoddi4+0x1e8>
 8000d16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d1e:	3801      	subs	r0, #1
 8000d20:	e7a8      	b.n	8000c74 <__udivmoddi4+0x1e8>
 8000d22:	4631      	mov	r1, r6
 8000d24:	e7ed      	b.n	8000d02 <__udivmoddi4+0x276>
 8000d26:	4603      	mov	r3, r0
 8000d28:	e799      	b.n	8000c5e <__udivmoddi4+0x1d2>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e7d4      	b.n	8000cd8 <__udivmoddi4+0x24c>
 8000d2e:	46d6      	mov	lr, sl
 8000d30:	e77f      	b.n	8000c32 <__udivmoddi4+0x1a6>
 8000d32:	4463      	add	r3, ip
 8000d34:	3802      	subs	r0, #2
 8000d36:	e74d      	b.n	8000bd4 <__udivmoddi4+0x148>
 8000d38:	4606      	mov	r6, r0
 8000d3a:	4623      	mov	r3, r4
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	e70f      	b.n	8000b60 <__udivmoddi4+0xd4>
 8000d40:	3e02      	subs	r6, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	e730      	b.n	8000ba8 <__udivmoddi4+0x11c>
 8000d46:	bf00      	nop

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <delay_us>:
extern TIM_HandleTypeDef htim3; // ultrasonic
extern TIM_HandleTypeDef htim11; // delay_us
extern UART_HandleTypeDef huart2;

// us동안 지연
void delay_us(uint16_t t) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	80fb      	strh	r3, [r7, #6]
	htim11.Instance->CNT = 0;
 8000d56:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <delay_us+0x30>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(htim11.Instance->CNT < t);
 8000d5e:	bf00      	nop
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <delay_us+0x30>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d3f9      	bcc.n	8000d60 <delay_us+0x14>
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000114 	.word	0x20000114

08000d80 <setSound>:

void setSound(uint16_t frequency) {
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	80fb      	strh	r3, [r7, #6]
	htim1.Instance->ARR = 1000000 / frequency - 1;
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dbc <setSound+0x3c>)
 8000d8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d92:	1e5a      	subs	r2, r3, #1
 8000d94:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <setSound+0x40>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	62da      	str	r2, [r3, #44]	@ 0x2c
	htim1.Instance->CCR1 = htim1.Instance->ARR / 2;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	@ (8000dc0 <setSound+0x40>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <setSound+0x40>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	0852      	lsrs	r2, r2, #1
 8000da6:	635a      	str	r2, [r3, #52]	@ 0x34
	htim1.Instance->CNT = 0;
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <setSound+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	000f4240 	.word	0x000f4240
 8000dc0:	20000084 	.word	0x20000084

08000dc4 <stopSound>:

void stopSound() {
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
	htim1.Instance->CCR1 = 0;
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <stopSound+0x18>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	20000084 	.word	0x20000084

08000de0 <app>:

void app() {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
	// uart 수신 인터럽트 시작
	initUart(&huart2);
 8000de6:	4839      	ldr	r0, [pc, #228]	@ (8000ecc <app+0xec>)
 8000de8:	f000 fcd4 	bl	8001794 <initUart>
	// 타이머 시작
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dec:	2100      	movs	r1, #0
 8000dee:	4838      	ldr	r0, [pc, #224]	@ (8000ed0 <app+0xf0>)
 8000df0:	f001 ff16 	bl	8002c20 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim11);
 8000df4:	4837      	ldr	r0, [pc, #220]	@ (8000ed4 <app+0xf4>)
 8000df6:	f001 fe5f 	bl	8002ab8 <HAL_TIM_Base_Start>
	initUltrasonic(&htim3);
 8000dfa:	4837      	ldr	r0, [pc, #220]	@ (8000ed8 <app+0xf8>)
 8000dfc:	f000 fd7a 	bl	80018f4 <initUltrasonic>
	while(1) {
			uint8_t distance = getDistance();
 8000e00:	f000 fd8a 	bl	8001918 <getDistance>
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
			printf("distance = %d\n", getDistance());
 8000e08:	f000 fd86 	bl	8001918 <getDistance>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4832      	ldr	r0, [pc, #200]	@ (8000edc <app+0xfc>)
 8000e12:	f004 fa8d 	bl	8005330 <iprintf>
			if (distance > 50) {
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b32      	cmp	r3, #50	@ 0x32
 8000e1a:	d902      	bls.n	8000e22 <app+0x42>
				stopSound();
 8000e1c:	f7ff ffd2 	bl	8000dc4 <stopSound>
 8000e20:	e7ee      	b.n	8000e00 <app+0x20>
			}
			else if(distance > 20) {
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	2b14      	cmp	r3, #20
 8000e26:	d910      	bls.n	8000e4a <app+0x6a>
				setSound(500);
 8000e28:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e2c:	f7ff ffa8 	bl	8000d80 <setSound>
				HAL_Delay(500);
 8000e30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e34:	f000 fe32 	bl	8001a9c <HAL_Delay>
				stopSound(500);
 8000e38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e3c:	f7ff ffc2 	bl	8000dc4 <stopSound>
				HAL_Delay(500);
 8000e40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e44:	f000 fe2a 	bl	8001a9c <HAL_Delay>
 8000e48:	e7da      	b.n	8000e00 <app+0x20>
			}
			else if (distance > 15) {
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d910      	bls.n	8000e72 <app+0x92>
				setSound(400);
 8000e50:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000e54:	f7ff ff94 	bl	8000d80 <setSound>
				HAL_Delay(400);
 8000e58:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000e5c:	f000 fe1e 	bl	8001a9c <HAL_Delay>
				stopSound(400);
 8000e60:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000e64:	f7ff ffae 	bl	8000dc4 <stopSound>
				HAL_Delay(400);
 8000e68:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000e6c:	f000 fe16 	bl	8001a9c <HAL_Delay>
 8000e70:	e7c6      	b.n	8000e00 <app+0x20>
			}
			else if (distance > 10) {
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b0a      	cmp	r3, #10
 8000e76:	d910      	bls.n	8000e9a <app+0xba>
				setSound(300);
 8000e78:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e7c:	f7ff ff80 	bl	8000d80 <setSound>
				HAL_Delay(300);
 8000e80:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e84:	f000 fe0a 	bl	8001a9c <HAL_Delay>
				stopSound(300);
 8000e88:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e8c:	f7ff ff9a 	bl	8000dc4 <stopSound>
				HAL_Delay(300);
 8000e90:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000e94:	f000 fe02 	bl	8001a9c <HAL_Delay>
 8000e98:	e7b2      	b.n	8000e00 <app+0x20>
			}
			else if (distance > 5) {
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b05      	cmp	r3, #5
 8000e9e:	d90c      	bls.n	8000eba <app+0xda>
				setSound(200);
 8000ea0:	20c8      	movs	r0, #200	@ 0xc8
 8000ea2:	f7ff ff6d 	bl	8000d80 <setSound>
				HAL_Delay(200);
 8000ea6:	20c8      	movs	r0, #200	@ 0xc8
 8000ea8:	f000 fdf8 	bl	8001a9c <HAL_Delay>
				stopSound(200);
 8000eac:	20c8      	movs	r0, #200	@ 0xc8
 8000eae:	f7ff ff89 	bl	8000dc4 <stopSound>
				HAL_Delay(200);
 8000eb2:	20c8      	movs	r0, #200	@ 0xc8
 8000eb4:	f000 fdf2 	bl	8001a9c <HAL_Delay>
 8000eb8:	e7a2      	b.n	8000e00 <app+0x20>
			}
			else {
				htim1.Instance->CCR1 = htim1.Instance->ARR/2;
 8000eba:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <app+0xf0>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <app+0xf0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	0852      	lsrs	r2, r2, #1
 8000ec6:	635a      	str	r2, [r3, #52]	@ 0x34
	while(1) {
 8000ec8:	e79a      	b.n	8000e00 <app+0x20>
 8000eca:	bf00      	nop
 8000ecc:	2000015c 	.word	0x2000015c
 8000ed0:	20000084 	.word	0x20000084
 8000ed4:	20000114 	.word	0x20000114
 8000ed8:	200000cc 	.word	0x200000cc
 8000edc:	08006024 	.word	0x08006024

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fd68 	bl	80019b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f80e 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f9c8 	bl	8001280 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ef0:	f000 f868 	bl	8000fc4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ef4:	f000 f906 	bl	8001104 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000ef8:	f000 f974 	bl	80011e4 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000efc:	f000 f996 	bl	800122c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000f00:	f7ff ff6e 	bl	8000de0 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <main+0x24>

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b094      	sub	sp, #80	@ 0x50
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2230      	movs	r2, #48	@ 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f004 fa5f 	bl	80053da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <SystemClock_Config+0xb4>)
 8000f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f34:	4a21      	ldr	r2, [pc, #132]	@ (8000fbc <SystemClock_Config+0xb4>)
 8000f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <SystemClock_Config+0xb4>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <SystemClock_Config+0xb8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <SystemClock_Config+0xb8>)
 8000f52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <SystemClock_Config+0xb8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f64:	2302      	movs	r3, #2
 8000f66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6c:	2310      	movs	r3, #16
 8000f6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f74:	f107 0320 	add.w	r3, r7, #32
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f001 f8f5 	bl	8002168 <HAL_RCC_OscConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000f84:	f000 f9ae 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f88:	230f      	movs	r3, #15
 8000f8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 fb58 	bl	8002658 <HAL_RCC_ClockConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fae:	f000 f999 	bl	80012e4 <Error_Handler>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	3750      	adds	r7, #80	@ 0x50
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40007000 	.word	0x40007000

08000fc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b096      	sub	sp, #88	@ 0x58
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
 8000ff2:	615a      	str	r2, [r3, #20]
 8000ff4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f004 f9ec 	bl	80053da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001002:	4b3e      	ldr	r3, [pc, #248]	@ (80010fc <MX_TIM1_Init+0x138>)
 8001004:	4a3e      	ldr	r2, [pc, #248]	@ (8001100 <MX_TIM1_Init+0x13c>)
 8001006:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001008:	4b3c      	ldr	r3, [pc, #240]	@ (80010fc <MX_TIM1_Init+0x138>)
 800100a:	220f      	movs	r2, #15
 800100c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100e:	4b3b      	ldr	r3, [pc, #236]	@ (80010fc <MX_TIM1_Init+0x138>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001014:	4b39      	ldr	r3, [pc, #228]	@ (80010fc <MX_TIM1_Init+0x138>)
 8001016:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800101a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101c:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <MX_TIM1_Init+0x138>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001022:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <MX_TIM1_Init+0x138>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <MX_TIM1_Init+0x138>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800102e:	4833      	ldr	r0, [pc, #204]	@ (80010fc <MX_TIM1_Init+0x138>)
 8001030:	f001 fcf2 	bl	8002a18 <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800103a:	f000 f953 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001042:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001044:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001048:	4619      	mov	r1, r3
 800104a:	482c      	ldr	r0, [pc, #176]	@ (80010fc <MX_TIM1_Init+0x138>)
 800104c:	f002 fa5a 	bl	8003504 <HAL_TIM_ConfigClockSource>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001056:	f000 f945 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800105a:	4828      	ldr	r0, [pc, #160]	@ (80010fc <MX_TIM1_Init+0x138>)
 800105c:	f001 fd86 	bl	8002b6c <HAL_TIM_PWM_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001066:	f000 f93d 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001072:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001076:	4619      	mov	r1, r3
 8001078:	4820      	ldr	r0, [pc, #128]	@ (80010fc <MX_TIM1_Init+0x138>)
 800107a:	f002 ff6d 	bl	8003f58 <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001084:	f000 f92e 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001088:	2360      	movs	r3, #96	@ 0x60
 800108a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800109c:	2300      	movs	r3, #0
 800109e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a8:	2200      	movs	r2, #0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4813      	ldr	r0, [pc, #76]	@ (80010fc <MX_TIM1_Init+0x138>)
 80010ae:	f002 f967 	bl	8003380 <HAL_TIM_PWM_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80010b8:	f000 f914 	bl	80012e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	@ (80010fc <MX_TIM1_Init+0x138>)
 80010e0:	f002 ffa8 	bl	8004034 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80010ea:	f000 f8fb 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010ee:	4803      	ldr	r0, [pc, #12]	@ (80010fc <MX_TIM1_Init+0x138>)
 80010f0:	f000 f9a2 	bl	8001438 <HAL_TIM_MspPostInit>

}
 80010f4:	bf00      	nop
 80010f6:	3758      	adds	r7, #88	@ 0x58
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000084 	.word	0x20000084
 8001100:	40010000 	.word	0x40010000

08001104 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	@ 0x28
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800112e:	4b2b      	ldr	r3, [pc, #172]	@ (80011dc <MX_TIM3_Init+0xd8>)
 8001130:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <MX_TIM3_Init+0xdc>)
 8001132:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001134:	4b29      	ldr	r3, [pc, #164]	@ (80011dc <MX_TIM3_Init+0xd8>)
 8001136:	220f      	movs	r2, #15
 8001138:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b28      	ldr	r3, [pc, #160]	@ (80011dc <MX_TIM3_Init+0xd8>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001140:	4b26      	ldr	r3, [pc, #152]	@ (80011dc <MX_TIM3_Init+0xd8>)
 8001142:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001146:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b24      	ldr	r3, [pc, #144]	@ (80011dc <MX_TIM3_Init+0xd8>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b23      	ldr	r3, [pc, #140]	@ (80011dc <MX_TIM3_Init+0xd8>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001154:	4821      	ldr	r0, [pc, #132]	@ (80011dc <MX_TIM3_Init+0xd8>)
 8001156:	f001 fc5f 	bl	8002a18 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8001160:	f000 f8c0 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001168:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0318 	add.w	r3, r7, #24
 800116e:	4619      	mov	r1, r3
 8001170:	481a      	ldr	r0, [pc, #104]	@ (80011dc <MX_TIM3_Init+0xd8>)
 8001172:	f002 f9c7 	bl	8003504 <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800117c:	f000 f8b2 	bl	80012e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001180:	4816      	ldr	r0, [pc, #88]	@ (80011dc <MX_TIM3_Init+0xd8>)
 8001182:	f001 fdfd 	bl	8002d80 <HAL_TIM_IC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f8aa 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	480f      	ldr	r0, [pc, #60]	@ (80011dc <MX_TIM3_Init+0xd8>)
 80011a0:	f002 feda 	bl	8003f58 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80011aa:	f000 f89b 	bl	80012e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011b2:	2301      	movs	r3, #1
 80011b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_TIM3_Init+0xd8>)
 80011c6:	f002 f83f 	bl	8003248 <HAL_TIM_IC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80011d0:	f000 f888 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	@ 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000cc 	.word	0x200000cc
 80011e0:	40000400 	.word	0x40000400

080011e4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_TIM11_Init+0x40>)
 80011ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <MX_TIM11_Init+0x44>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16-1;
 80011ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <MX_TIM11_Init+0x40>)
 80011f0:	220f      	movs	r2, #15
 80011f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_TIM11_Init+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <MX_TIM11_Init+0x40>)
 80011fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001200:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_TIM11_Init+0x40>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_TIM11_Init+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_TIM11_Init+0x40>)
 8001210:	f001 fc02 	bl	8002a18 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800121a:	f000 f863 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000114 	.word	0x20000114
 8001228:	40014800 	.word	0x40014800

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <MX_USART2_UART_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001264:	f002 ff4c 	bl	8004100 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f839 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000015c 	.word	0x2000015c
 800127c:	40004400 	.word	0x40004400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	4b10      	ldr	r3, [pc, #64]	@ (80012dc <MX_GPIO_Init+0x5c>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129c:	4a0f      	ldr	r2, [pc, #60]	@ (80012dc <MX_GPIO_Init+0x5c>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a4:	4b0d      	ldr	r3, [pc, #52]	@ (80012dc <MX_GPIO_Init+0x5c>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	603b      	str	r3, [r7, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);
 80012b0:	2200      	movs	r2, #0
 80012b2:	2120      	movs	r1, #32
 80012b4:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <MX_GPIO_Init+0x60>)
 80012b6:	f000 ff3d 	bl	8002134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Trigger_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin;
 80012ba:	2320      	movs	r3, #32
 80012bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Trigger_GPIO_Port, &GPIO_InitStruct);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_GPIO_Init+0x60>)
 80012d0:	f000 fdac 	bl	8001e2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <Error_Handler+0x8>

080012f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b10      	ldr	r3, [pc, #64]	@ (800133c <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a0f      	ldr	r2, [pc, #60]	@ (800133c <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_MspInit+0x4c>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_MspInit+0x4c>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	@ 0x40
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_MspInit+0x4c>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08c      	sub	sp, #48	@ 0x30
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a31      	ldr	r2, [pc, #196]	@ (8001424 <HAL_TIM_Base_MspInit+0xe4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10e      	bne.n	8001380 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
 8001366:	4b30      	ldr	r3, [pc, #192]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a2f      	ldr	r2, [pc, #188]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b2d      	ldr	r3, [pc, #180]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800137e:	e04c      	b.n	800141a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a29      	ldr	r2, [pc, #164]	@ (800142c <HAL_TIM_Base_MspInit+0xec>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d134      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	4a25      	ldr	r2, [pc, #148]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6413      	str	r3, [r2, #64]	@ 0x40
 800139a:	4b23      	ldr	r3, [pc, #140]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ECHO_Pin;
 80013c2:	2340      	movs	r3, #64	@ 0x40
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d2:	2302      	movs	r3, #2
 80013d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4814      	ldr	r0, [pc, #80]	@ (8001430 <HAL_TIM_Base_MspInit+0xf0>)
 80013de:	f000 fd25 	bl	8001e2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	201d      	movs	r0, #29
 80013e8:	f000 fc57 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013ec:	201d      	movs	r0, #29
 80013ee:	f000 fc70 	bl	8001cd2 <HAL_NVIC_EnableIRQ>
}
 80013f2:	e012      	b.n	800141a <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM11)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001434 <HAL_TIM_Base_MspInit+0xf4>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10d      	bne.n	800141a <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	4a08      	ldr	r2, [pc, #32]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 8001408:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800140c:	6453      	str	r3, [r2, #68]	@ 0x44
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_TIM_Base_MspInit+0xe8>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001412:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	@ 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40010000 	.word	0x40010000
 8001428:	40023800 	.word	0x40023800
 800142c:	40000400 	.word	0x40000400
 8001430:	40020000 	.word	0x40020000
 8001434:	40014800 	.word	0x40014800

08001438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_TIM_MspPostInit+0x68>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d11e      	bne.n	8001498 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <HAL_TIM_MspPostInit+0x6c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <HAL_TIM_MspPostInit+0x6c>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_TIM_MspPostInit+0x6c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8001476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001488:	2301      	movs	r3, #1
 800148a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <HAL_TIM_MspPostInit+0x70>)
 8001494:	f000 fcca 	bl	8001e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001498:	bf00      	nop
 800149a:	3720      	adds	r7, #32
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000

080014ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	@ 0x28
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001540 <HAL_UART_MspInit+0x94>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d133      	bne.n	8001536 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <HAL_UART_MspInit+0x98>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001544 <HAL_UART_MspInit+0x98>)
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014de:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_UART_MspInit+0x98>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_UART_MspInit+0x98>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a14      	ldr	r2, [pc, #80]	@ (8001544 <HAL_UART_MspInit+0x98>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_UART_MspInit+0x98>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001516:	2307      	movs	r3, #7
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	4809      	ldr	r0, [pc, #36]	@ (8001548 <HAL_UART_MspInit+0x9c>)
 8001522:	f000 fc83 	bl	8001e2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	2026      	movs	r0, #38	@ 0x26
 800152c:	f000 fbb5 	bl	8001c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001530:	2026      	movs	r0, #38	@ 0x26
 8001532:	f000 fbce 	bl	8001cd2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	@ 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40004400 	.word	0x40004400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <NMI_Handler+0x4>

08001554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001558:	bf00      	nop
 800155a:	e7fd      	b.n	8001558 <HardFault_Handler+0x4>

0800155c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <MemManage_Handler+0x4>

08001564 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <BusFault_Handler+0x4>

0800156c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <UsageFault_Handler+0x4>

08001574 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a2:	f000 fa5b 	bl	8001a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015b0:	4802      	ldr	r0, [pc, #8]	@ (80015bc <TIM3_IRQHandler+0x10>)
 80015b2:	f001 fd59 	bl	8003068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200000cc 	.word	0x200000cc

080015c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <USART2_IRQHandler+0x10>)
 80015c6:	f002 fe9b 	bl	8004300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000015c 	.word	0x2000015c

080015d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e00a      	b.n	80015fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015e6:	f3af 8000 	nop.w
 80015ea:	4601      	mov	r1, r0
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60ba      	str	r2, [r7, #8]
 80015f2:	b2ca      	uxtb	r2, r1
 80015f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	429a      	cmp	r2, r3
 8001602:	dbf0      	blt.n	80015e6 <_read+0x12>
  }

  return len;
 8001604:	687b      	ldr	r3, [r7, #4]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3718      	adds	r7, #24
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_close>:
  }
  return len;
}

int _close(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001636:	605a      	str	r2, [r3, #4]
  return 0;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_isatty>:

int _isatty(int file)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164e:	2301      	movs	r3, #1
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f003 fee6 	bl	8005478 <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20020000 	.word	0x20020000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	200001a4 	.word	0x200001a4
 80016e0:	20000378 	.word	0x20000378

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <_write>:
uint8_t rxCharacter;
uint8_t rxBuffer[rxBufferMax]; //circle buffer
int rxBufferReadIndex; // 읽기 위치
int rxBufferWriteIndex; // 쓰기 위치

int _write(int file, char* p, int len) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(myHuart, (uint8_t*)p, len, 10);
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <_write+0x28>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	b29a      	uxth	r2, r3
 800171c:	230a      	movs	r3, #10
 800171e:	68b9      	ldr	r1, [r7, #8]
 8001720:	f002 fd3e 	bl	80041a0 <HAL_UART_Transmit>
	return len;
 8001724:	687b      	ldr	r3, [r7, #4]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200001a8 	.word	0x200001a8

08001734 <HAL_UART_RxCpltCallback>:

// 수신 인터럽트(interrupt = event) 콜백 (listner, isr)
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	// 수신된 문자 저장
	rxBuffer[rxBufferWriteIndex++] = rxCharacter;
 800173c:	4b10      	ldr	r3, [pc, #64]	@ (8001780 <HAL_UART_RxCpltCallback+0x4c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	490f      	ldr	r1, [pc, #60]	@ (8001780 <HAL_UART_RxCpltCallback+0x4c>)
 8001744:	600a      	str	r2, [r1, #0]
 8001746:	4a0f      	ldr	r2, [pc, #60]	@ (8001784 <HAL_UART_RxCpltCallback+0x50>)
 8001748:	7811      	ldrb	r1, [r2, #0]
 800174a:	4a0f      	ldr	r2, [pc, #60]	@ (8001788 <HAL_UART_RxCpltCallback+0x54>)
 800174c:	54d1      	strb	r1, [r2, r3]
	// 최대값 도달시 처음으로
	rxBufferWriteIndex %= rxBufferMax;
 800174e:	4b0c      	ldr	r3, [pc, #48]	@ (8001780 <HAL_UART_RxCpltCallback+0x4c>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_UART_RxCpltCallback+0x58>)
 8001754:	fb83 1302 	smull	r1, r3, r3, r2
 8001758:	1159      	asrs	r1, r3, #5
 800175a:	17d3      	asrs	r3, r2, #31
 800175c:	1acb      	subs	r3, r1, r3
 800175e:	2164      	movs	r1, #100	@ 0x64
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a06      	ldr	r2, [pc, #24]	@ (8001780 <HAL_UART_RxCpltCallback+0x4c>)
 8001768:	6013      	str	r3, [r2, #0]
	// 인터럽트 재장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 800176a:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_UART_RxCpltCallback+0x5c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	4904      	ldr	r1, [pc, #16]	@ (8001784 <HAL_UART_RxCpltCallback+0x50>)
 8001772:	4618      	mov	r0, r3
 8001774:	f002 fd9f 	bl	80042b6 <HAL_UART_Receive_IT>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000214 	.word	0x20000214
 8001784:	200001ac 	.word	0x200001ac
 8001788:	200001b0 	.word	0x200001b0
 800178c:	51eb851f 	.word	0x51eb851f
 8001790:	200001a8 	.word	0x200001a8

08001794 <initUart>:

// uart 장치 초기화
void initUart(UART_HandleTypeDef *inHuart) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	// uart 장치 주소 백업
	myHuart = inHuart;
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <initUart+0x24>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
	// 인터럽트 장전
	HAL_UART_Receive_IT(myHuart, &rxCharacter, 1);
 80017a2:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <initUart+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	4904      	ldr	r1, [pc, #16]	@ (80017bc <initUart+0x28>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fd83 	bl	80042b6 <HAL_UART_Receive_IT>

}
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200001a8 	.word	0x200001a8
 80017bc:	200001ac 	.word	0x200001ac

080017c0 <HAL_TIM_IC_CaptureCallback>:
bool isFirstCapture;

TIM_HandleTypeDef *myHtim;

//tim3 interrupt callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7f1b      	ldrb	r3, [r3, #28]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d17c      	bne.n	80018ca <HAL_TIM_IC_CaptureCallback+0x10a>
		if(isFirstCapture == true) {
 80017d0:	4b43      	ldr	r3, [pc, #268]	@ (80018e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01b      	beq.n	8001810 <HAL_TIM_IC_CaptureCallback+0x50>
			// IC_VAL1에 상승 엣지 시간 저장
			IC_VAL1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80017d8:	2100      	movs	r1, #0
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f001 ff5a 	bl	8003694 <HAL_TIM_ReadCapturedValue>
 80017e0:	4603      	mov	r3, r0
 80017e2:	b29a      	uxth	r2, r3
 80017e4:	4b3f      	ldr	r3, [pc, #252]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80017e6:	801a      	strh	r2, [r3, #0]
			// 하강 엣지 검출 설정
			isFirstCapture = false;
 80017e8:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6a1a      	ldr	r2, [r3, #32]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 020a 	bic.w	r2, r2, #10
 80017fc:	621a      	str	r2, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a1a      	ldr	r2, [r3, #32]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 0202 	orr.w	r2, r2, #2
 800180c:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			// 인터럽트 끄기
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}
	}
}
 800180e:	e05c      	b.n	80018ca <HAL_TIM_IC_CaptureCallback+0x10a>
			IC_VAL2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001810:	2100      	movs	r1, #0
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f001 ff3e 	bl	8003694 <HAL_TIM_ReadCapturedValue>
 8001818:	4603      	mov	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	4b32      	ldr	r3, [pc, #200]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800181e:	801a      	strh	r2, [r3, #0]
			if (IC_VAL2 > IC_VAL1) {
 8001820:	4b31      	ldr	r3, [pc, #196]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001822:	881a      	ldrh	r2, [r3, #0]
 8001824:	4b2f      	ldr	r3, [pc, #188]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d908      	bls.n	800183e <HAL_TIM_IC_CaptureCallback+0x7e>
				difference = IC_VAL2-IC_VAL1;
 800182c:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	4b2c      	ldr	r3, [pc, #176]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b2c      	ldr	r3, [pc, #176]	@ (80018ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 800183a:	801a      	strh	r2, [r3, #0]
 800183c:	e009      	b.n	8001852 <HAL_TIM_IC_CaptureCallback+0x92>
				difference = (65535 - IC_VAL1) + IC_VAL2;
 800183e:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001840:	881a      	ldrh	r2, [r3, #0]
 8001842:	4b28      	ldr	r3, [pc, #160]	@ (80018e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001850:	801a      	strh	r2, [r3, #0]
			distance = (uint8_t) ((float)difference * 0.034 / 2);
 8001852:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	ee07 3a90 	vmov	s15, r3
 800185a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800185e:	ee17 0a90 	vmov	r0, s15
 8001862:	f7fe fe71 	bl	8000548 <__aeabi_f2d>
 8001866:	a31c      	add	r3, pc, #112	@ (adr r3, 80018d8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fec4 	bl	80005f8 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001880:	f7fe ffe4 	bl	800084c <__aeabi_ddiv>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7ff f8c6 	bl	8000a1c <__aeabi_d2uiz>
 8001890:	4603      	mov	r3, r0
 8001892:	b2da      	uxtb	r2, r3
 8001894:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001896:	701a      	strb	r2, [r3, #0]
			isFirstCapture = true;
 8001898:	4b11      	ldr	r3, [pc, #68]	@ (80018e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6a1a      	ldr	r2, [r3, #32]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 020a 	bic.w	r2, r2, #10
 80018ac:	621a      	str	r2, [r3, #32]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6a12      	ldr	r2, [r2, #32]
 80018b8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0202 	bic.w	r2, r2, #2
 80018c8:	60da      	str	r2, [r3, #12]
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	f3af 8000 	nop.w
 80018d8:	b020c49c 	.word	0xb020c49c
 80018dc:	3fa16872 	.word	0x3fa16872
 80018e0:	2000021f 	.word	0x2000021f
 80018e4:	20000218 	.word	0x20000218
 80018e8:	2000021a 	.word	0x2000021a
 80018ec:	2000021c 	.word	0x2000021c
 80018f0:	2000021e 	.word	0x2000021e

080018f4 <initUltrasonic>:

void initUltrasonic(TIM_HandleTypeDef *inHtim) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	myHtim = inHtim;
 80018fc:	4a05      	ldr	r2, [pc, #20]	@ (8001914 <initUltrasonic+0x20>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6013      	str	r3, [r2, #0]
	HAL_TIM_IC_Start_IT(inHtim, TIM_CHANNEL_1);
 8001902:	2100      	movs	r1, #0
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f001 fa95 	bl	8002e34 <HAL_TIM_IC_Start_IT>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000220 	.word	0x20000220

08001918 <getDistance>:

uint8_t getDistance() {
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	//10us 펄스 생성
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 1);
 800191c:	2201      	movs	r2, #1
 800191e:	2120      	movs	r1, #32
 8001920:	480d      	ldr	r0, [pc, #52]	@ (8001958 <getDistance+0x40>)
 8001922:	f000 fc07 	bl	8002134 <HAL_GPIO_WritePin>
	delay_us(10);
 8001926:	200a      	movs	r0, #10
 8001928:	f7ff fa10 	bl	8000d4c <delay_us>
	HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2120      	movs	r1, #32
 8001930:	4809      	ldr	r0, [pc, #36]	@ (8001958 <getDistance+0x40>)
 8001932:	f000 fbff 	bl	8002134 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(myHtim, TIM_IT_CC1);
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <getDistance+0x44>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	4b07      	ldr	r3, [pc, #28]	@ (800195c <getDistance+0x44>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f042 0202 	orr.w	r2, r2, #2
 8001948:	60da      	str	r2, [r3, #12]
	HAL_Delay(66);
 800194a:	2042      	movs	r0, #66	@ 0x42
 800194c:	f000 f8a6 	bl	8001a9c <HAL_Delay>
	return distance;
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <getDistance+0x48>)
 8001952:	781b      	ldrb	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40020000 	.word	0x40020000
 800195c:	20000220 	.word	0x20000220
 8001960:	2000021e 	.word	0x2000021e

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800199c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001968:	f7ff febc 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	@ (80019a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	@ (80019b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001992:	f003 fd77 	bl	8005484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff faa3 	bl	8000ee0 <main>
  bx  lr    
 800199a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800199c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019a8:	08006090 	.word	0x08006090
  ldr r2, =_sbss
 80019ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019b0:	20000374 	.word	0x20000374

080019b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC_IRQHandler>
	...

080019b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019bc:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0d      	ldr	r2, [pc, #52]	@ (80019f8 <HAL_Init+0x40>)
 80019c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <HAL_Init+0x40>)
 80019ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	@ (80019f8 <HAL_Init+0x40>)
 80019da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f000 f94f 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	200f      	movs	r0, #15
 80019e8:	f000 f808 	bl	80019fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fc80 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_InitTick+0x54>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_InitTick+0x58>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 f967 	bl	8001cee <HAL_SYSTICK_Config>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00e      	b.n	8001a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d80a      	bhi.n	8001a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a30:	2200      	movs	r2, #0
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f000 f92f 	bl	8001c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a3c:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <HAL_InitTick+0x5c>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e000      	b.n	8001a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000004 	.word	0x20000004

08001a5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_IncTick+0x20>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <HAL_IncTick+0x24>)
 8001a6e:	6013      	str	r3, [r2, #0]
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000224 	.word	0x20000224

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b03      	ldr	r3, [pc, #12]	@ (8001a98 <HAL_GetTick+0x14>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	20000224 	.word	0x20000224

08001a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa4:	f7ff ffee 	bl	8001a84 <HAL_GetTick>
 8001aa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab4:	d005      	beq.n	8001ac2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae0 <HAL_Delay+0x44>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4413      	add	r3, r2
 8001ac0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ac2:	bf00      	nop
 8001ac4:	f7ff ffde 	bl	8001a84 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d8f7      	bhi.n	8001ac4 <HAL_Delay+0x28>
  {
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008

08001ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b00:	4013      	ands	r3, r2
 8001b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b16:	4a04      	ldr	r2, [pc, #16]	@ (8001b28 <__NVIC_SetPriorityGrouping+0x44>)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	60d3      	str	r3, [r2, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <__NVIC_GetPriorityGrouping+0x18>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	0a1b      	lsrs	r3, r3, #8
 8001b36:	f003 0307 	and.w	r3, r3, #7
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	db0b      	blt.n	8001b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	f003 021f 	and.w	r2, r3, #31
 8001b60:	4907      	ldr	r1, [pc, #28]	@ (8001b80 <__NVIC_EnableIRQ+0x38>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2001      	movs	r0, #1
 8001b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff29 	bl	8001ae4 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cac:	f7ff ff3e 	bl	8001b2c <__NVIC_GetPriorityGrouping>
 8001cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f7ff ff8e 	bl	8001bd8 <NVIC_EncodePriority>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff5d 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ff31 	bl	8001b48 <__NVIC_EnableIRQ>
}
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b082      	sub	sp, #8
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ffa2 	bl	8001c40 <SysTick_Config>
 8001cfc:	4603      	mov	r3, r0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b084      	sub	sp, #16
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d14:	f7ff feb6 	bl	8001a84 <HAL_GetTick>
 8001d18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d008      	beq.n	8001d38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e052      	b.n	8001dde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0216 	bic.w	r2, r2, #22
 8001d46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d103      	bne.n	8001d68 <HAL_DMA_Abort+0x62>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0208 	bic.w	r2, r2, #8
 8001d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0201 	bic.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d88:	e013      	b.n	8001db2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d8a:	f7ff fe7b 	bl	8001a84 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d90c      	bls.n	8001db2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2203      	movs	r2, #3
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e015      	b.n	8001dde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e4      	bne.n	8001d8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	223f      	movs	r2, #63	@ 0x3f
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d004      	beq.n	8001e04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2280      	movs	r2, #128	@ 0x80
 8001dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e00c      	b.n	8001e1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2205      	movs	r2, #5
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	e159      	b.n	80020fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e48:	2201      	movs	r2, #1
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	f040 8148 	bne.w	80020f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d005      	beq.n	8001e7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d130      	bne.n	8001ee0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	2203      	movs	r2, #3
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	091b      	lsrs	r3, r3, #4
 8001eca:	f003 0201 	and.w	r2, r3, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d017      	beq.n	8001f1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 0303 	and.w	r3, r3, #3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d123      	bne.n	8001f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	220f      	movs	r2, #15
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	08da      	lsrs	r2, r3, #3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	3208      	adds	r2, #8
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0203 	and.w	r2, r3, #3
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a2 	beq.w	80020f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b57      	ldr	r3, [pc, #348]	@ (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	4a56      	ldr	r2, [pc, #344]	@ (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fc2:	4b54      	ldr	r3, [pc, #336]	@ (8002114 <HAL_GPIO_Init+0x2e8>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fce:	4a52      	ldr	r2, [pc, #328]	@ (8002118 <HAL_GPIO_Init+0x2ec>)
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	220f      	movs	r2, #15
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a49      	ldr	r2, [pc, #292]	@ (800211c <HAL_GPIO_Init+0x2f0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x202>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a48      	ldr	r2, [pc, #288]	@ (8002120 <HAL_GPIO_Init+0x2f4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x1fe>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a47      	ldr	r2, [pc, #284]	@ (8002124 <HAL_GPIO_Init+0x2f8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x1fa>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a46      	ldr	r2, [pc, #280]	@ (8002128 <HAL_GPIO_Init+0x2fc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x1f6>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a45      	ldr	r2, [pc, #276]	@ (800212c <HAL_GPIO_Init+0x300>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x1f2>
 800201a:	2304      	movs	r3, #4
 800201c:	e008      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800201e:	2307      	movs	r3, #7
 8002020:	e006      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002022:	2303      	movs	r3, #3
 8002024:	e004      	b.n	8002030 <HAL_GPIO_Init+0x204>
 8002026:	2302      	movs	r3, #2
 8002028:	e002      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_GPIO_Init+0x204>
 800202e:	2300      	movs	r3, #0
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	f002 0203 	and.w	r2, r2, #3
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4093      	lsls	r3, r2
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002040:	4935      	ldr	r1, [pc, #212]	@ (8002118 <HAL_GPIO_Init+0x2ec>)
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	3302      	adds	r3, #2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800204e:	4b38      	ldr	r3, [pc, #224]	@ (8002130 <HAL_GPIO_Init+0x304>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002072:	4a2f      	ldr	r2, [pc, #188]	@ (8002130 <HAL_GPIO_Init+0x304>)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002078:	4b2d      	ldr	r3, [pc, #180]	@ (8002130 <HAL_GPIO_Init+0x304>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800209c:	4a24      	ldr	r2, [pc, #144]	@ (8002130 <HAL_GPIO_Init+0x304>)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020a2:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <HAL_GPIO_Init+0x304>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002130 <HAL_GPIO_Init+0x304>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020cc:	4b18      	ldr	r3, [pc, #96]	@ (8002130 <HAL_GPIO_Init+0x304>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f0:	4a0f      	ldr	r2, [pc, #60]	@ (8002130 <HAL_GPIO_Init+0x304>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3301      	adds	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	2b0f      	cmp	r3, #15
 8002100:	f67f aea2 	bls.w	8001e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	3724      	adds	r7, #36	@ 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40013800 	.word	0x40013800
 800211c:	40020000 	.word	0x40020000
 8002120:	40020400 	.word	0x40020400
 8002124:	40020800 	.word	0x40020800
 8002128:	40020c00 	.word	0x40020c00
 800212c:	40021000 	.word	0x40021000
 8002130:	40013c00 	.word	0x40013c00

08002134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	807b      	strh	r3, [r7, #2]
 8002140:	4613      	mov	r3, r2
 8002142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002144:	787b      	ldrb	r3, [r7, #1]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214a:	887a      	ldrh	r2, [r7, #2]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002150:	e003      	b.n	800215a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002152:	887b      	ldrh	r3, [r7, #2]
 8002154:	041a      	lsls	r2, r3, #16
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	619a      	str	r2, [r3, #24]
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e267      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d075      	beq.n	8002272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002186:	4b88      	ldr	r3, [pc, #544]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b04      	cmp	r3, #4
 8002190:	d00c      	beq.n	80021ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002192:	4b85      	ldr	r3, [pc, #532]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800219a:	2b08      	cmp	r3, #8
 800219c:	d112      	bne.n	80021c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219e:	4b82      	ldr	r3, [pc, #520]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021aa:	d10b      	bne.n	80021c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	4b7e      	ldr	r3, [pc, #504]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d05b      	beq.n	8002270 <HAL_RCC_OscConfig+0x108>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d157      	bne.n	8002270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e242      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021cc:	d106      	bne.n	80021dc <HAL_RCC_OscConfig+0x74>
 80021ce:	4b76      	ldr	r3, [pc, #472]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a75      	ldr	r2, [pc, #468]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01d      	b.n	8002218 <HAL_RCC_OscConfig+0xb0>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0x98>
 80021e6:	4b70      	ldr	r3, [pc, #448]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a6f      	ldr	r2, [pc, #444]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80021ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b6d      	ldr	r3, [pc, #436]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6c      	ldr	r2, [pc, #432]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0xb0>
 8002200:	4b69      	ldr	r3, [pc, #420]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a68      	ldr	r2, [pc, #416]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002206:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b66      	ldr	r3, [pc, #408]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a65      	ldr	r2, [pc, #404]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002212:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff fc30 	bl	8001a84 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002228:	f7ff fc2c 	bl	8001a84 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	@ 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e207      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b5b      	ldr	r3, [pc, #364]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0xc0>
 8002246:	e014      	b.n	8002272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002248:	f7ff fc1c 	bl	8001a84 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002250:	f7ff fc18 	bl	8001a84 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	@ 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e1f3      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	4b51      	ldr	r3, [pc, #324]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0xe8>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d063      	beq.n	8002346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800227e:	4b4a      	ldr	r3, [pc, #296]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002292:	2b08      	cmp	r3, #8
 8002294:	d11c      	bne.n	80022d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002296:	4b44      	ldr	r3, [pc, #272]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d116      	bne.n	80022d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d005      	beq.n	80022ba <HAL_RCC_OscConfig+0x152>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d001      	beq.n	80022ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e1c7      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4937      	ldr	r1, [pc, #220]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ce:	e03a      	b.n	8002346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d020      	beq.n	800231a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d8:	4b34      	ldr	r3, [pc, #208]	@ (80023ac <HAL_RCC_OscConfig+0x244>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022de:	f7ff fbd1 	bl	8001a84 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e6:	f7ff fbcd 	bl	8001a84 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1a8      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022f8:	4b2b      	ldr	r3, [pc, #172]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002304:	4b28      	ldr	r3, [pc, #160]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4925      	ldr	r1, [pc, #148]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]
 8002318:	e015      	b.n	8002346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231a:	4b24      	ldr	r3, [pc, #144]	@ (80023ac <HAL_RCC_OscConfig+0x244>)
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff fbb0 	bl	8001a84 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002328:	f7ff fbac 	bl	8001a84 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e187      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233a:	4b1b      	ldr	r3, [pc, #108]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d036      	beq.n	80023c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d016      	beq.n	8002388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_RCC_OscConfig+0x248>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7ff fb90 	bl	8001a84 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002368:	f7ff fb8c 	bl	8001a84 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e167      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237a:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_OscConfig+0x240>)
 800237c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x200>
 8002386:	e01b      	b.n	80023c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002388:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_RCC_OscConfig+0x248>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800238e:	f7ff fb79 	bl	8001a84 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002394:	e00e      	b.n	80023b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002396:	f7ff fb75 	bl	8001a84 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d907      	bls.n	80023b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e150      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
 80023a8:	40023800 	.word	0x40023800
 80023ac:	42470000 	.word	0x42470000
 80023b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023b4:	4b88      	ldr	r3, [pc, #544]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80023b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1ea      	bne.n	8002396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8097 	beq.w	80024fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d2:	4b81      	ldr	r3, [pc, #516]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10f      	bne.n	80023fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	4b7d      	ldr	r3, [pc, #500]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e6:	4a7c      	ldr	r2, [pc, #496]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ee:	4b7a      	ldr	r3, [pc, #488]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fe:	4b77      	ldr	r3, [pc, #476]	@ (80025dc <HAL_RCC_OscConfig+0x474>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d118      	bne.n	800243c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800240a:	4b74      	ldr	r3, [pc, #464]	@ (80025dc <HAL_RCC_OscConfig+0x474>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a73      	ldr	r2, [pc, #460]	@ (80025dc <HAL_RCC_OscConfig+0x474>)
 8002410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002416:	f7ff fb35 	bl	8001a84 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241e:	f7ff fb31 	bl	8001a84 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e10c      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002430:	4b6a      	ldr	r3, [pc, #424]	@ (80025dc <HAL_RCC_OscConfig+0x474>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x2ea>
 8002444:	4b64      	ldr	r3, [pc, #400]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002448:	4a63      	ldr	r2, [pc, #396]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002450:	e01c      	b.n	800248c <HAL_RCC_OscConfig+0x324>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	2b05      	cmp	r3, #5
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x30c>
 800245a:	4b5f      	ldr	r3, [pc, #380]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 800245c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800245e:	4a5e      	ldr	r2, [pc, #376]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	6713      	str	r3, [r2, #112]	@ 0x70
 8002466:	4b5c      	ldr	r3, [pc, #368]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 8002468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246a:	4a5b      	ldr	r2, [pc, #364]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6713      	str	r3, [r2, #112]	@ 0x70
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0x324>
 8002474:	4b58      	ldr	r3, [pc, #352]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 8002476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002478:	4a57      	ldr	r2, [pc, #348]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 800247a:	f023 0301 	bic.w	r3, r3, #1
 800247e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002480:	4b55      	ldr	r3, [pc, #340]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002484:	4a54      	ldr	r2, [pc, #336]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 8002486:	f023 0304 	bic.w	r3, r3, #4
 800248a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d015      	beq.n	80024c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7ff faf6 	bl	8001a84 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7ff faf2 	bl	8001a84 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e0cb      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0ee      	beq.n	800249c <HAL_RCC_OscConfig+0x334>
 80024be:	e014      	b.n	80024ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c0:	f7ff fae0 	bl	8001a84 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c6:	e00a      	b.n	80024de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7ff fadc 	bl	8001a84 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e0b5      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024de:	4b3e      	ldr	r3, [pc, #248]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1ee      	bne.n	80024c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d105      	bne.n	80024fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f0:	4b39      	ldr	r3, [pc, #228]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	4a38      	ldr	r2, [pc, #224]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80024f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a1 	beq.w	8002648 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002506:	4b34      	ldr	r3, [pc, #208]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b08      	cmp	r3, #8
 8002510:	d05c      	beq.n	80025cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d141      	bne.n	800259e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	4b31      	ldr	r3, [pc, #196]	@ (80025e0 <HAL_RCC_OscConfig+0x478>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7ff fab0 	bl	8001a84 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff faac 	bl	8001a84 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e087      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253a:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69da      	ldr	r2, [r3, #28]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	019b      	lsls	r3, r3, #6
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	3b01      	subs	r3, #1
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	061b      	lsls	r3, r3, #24
 800256a:	491b      	ldr	r1, [pc, #108]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002570:	4b1b      	ldr	r3, [pc, #108]	@ (80025e0 <HAL_RCC_OscConfig+0x478>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7ff fa85 	bl	8001a84 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257e:	f7ff fa81 	bl	8001a84 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e05c      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x416>
 800259c:	e054      	b.n	8002648 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_RCC_OscConfig+0x478>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fa6e 	bl	8001a84 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7ff fa6a 	bl	8001a84 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e045      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_RCC_OscConfig+0x470>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x444>
 80025ca:	e03d      	b.n	8002648 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e038      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
 80025d8:	40023800 	.word	0x40023800
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_RCC_OscConfig+0x4ec>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d028      	beq.n	8002644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d121      	bne.n	8002644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d11a      	bne.n	8002644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002614:	4013      	ands	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800261a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800261c:	4293      	cmp	r3, r2
 800261e:	d111      	bne.n	8002644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	3b01      	subs	r3, #1
 800262e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d107      	bne.n	8002644 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800

08002658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0cc      	b.n	8002806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800266c:	4b68      	ldr	r3, [pc, #416]	@ (8002810 <HAL_RCC_ClockConfig+0x1b8>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d90c      	bls.n	8002694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b65      	ldr	r3, [pc, #404]	@ (8002810 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b63      	ldr	r3, [pc, #396]	@ (8002810 <HAL_RCC_ClockConfig+0x1b8>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0b8      	b.n	8002806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d020      	beq.n	80026e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026ac:	4b59      	ldr	r3, [pc, #356]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a58      	ldr	r2, [pc, #352]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026c4:	4b53      	ldr	r3, [pc, #332]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	4a52      	ldr	r2, [pc, #328]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d0:	4b50      	ldr	r3, [pc, #320]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	494d      	ldr	r1, [pc, #308]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d044      	beq.n	8002778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d107      	bne.n	8002706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f6:	4b47      	ldr	r3, [pc, #284]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d119      	bne.n	8002736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e07f      	b.n	8002806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d003      	beq.n	8002716 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002712:	2b03      	cmp	r3, #3
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	4b3f      	ldr	r3, [pc, #252]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06f      	b.n	8002806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002726:	4b3b      	ldr	r3, [pc, #236]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e067      	b.n	8002806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002736:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f023 0203 	bic.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4934      	ldr	r1, [pc, #208]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 8002744:	4313      	orrs	r3, r2
 8002746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002748:	f7ff f99c 	bl	8001a84 <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	e00a      	b.n	8002766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002750:	f7ff f998 	bl	8001a84 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e04f      	b.n	8002806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	4b2b      	ldr	r3, [pc, #172]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 020c 	and.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	429a      	cmp	r2, r3
 8002776:	d1eb      	bne.n	8002750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002778:	4b25      	ldr	r3, [pc, #148]	@ (8002810 <HAL_RCC_ClockConfig+0x1b8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d20c      	bcs.n	80027a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b22      	ldr	r3, [pc, #136]	@ (8002810 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800278e:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e032      	b.n	8002806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027ac:	4b19      	ldr	r3, [pc, #100]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4916      	ldr	r1, [pc, #88]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d009      	beq.n	80027de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ca:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	490e      	ldr	r1, [pc, #56]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027de:	f000 f821 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 80027e2:	4602      	mov	r2, r0
 80027e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	490a      	ldr	r1, [pc, #40]	@ (8002818 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	5ccb      	ldrb	r3, [r1, r3]
 80027f2:	fa22 f303 	lsr.w	r3, r2, r3
 80027f6:	4a09      	ldr	r2, [pc, #36]	@ (800281c <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <HAL_RCC_ClockConfig+0x1c8>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f8fc 	bl	80019fc <HAL_InitTick>

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023c00 	.word	0x40023c00
 8002814:	40023800 	.word	0x40023800
 8002818:	08006034 	.word	0x08006034
 800281c:	20000000 	.word	0x20000000
 8002820:	20000004 	.word	0x20000004

08002824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002828:	b090      	sub	sp, #64	@ 0x40
 800282a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800283c:	4b59      	ldr	r3, [pc, #356]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 030c 	and.w	r3, r3, #12
 8002844:	2b08      	cmp	r3, #8
 8002846:	d00d      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x40>
 8002848:	2b08      	cmp	r3, #8
 800284a:	f200 80a1 	bhi.w	8002990 <HAL_RCC_GetSysClockFreq+0x16c>
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x34>
 8002852:	2b04      	cmp	r3, #4
 8002854:	d003      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x3a>
 8002856:	e09b      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002858:	4b53      	ldr	r3, [pc, #332]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800285a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800285c:	e09b      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800285e:	4b53      	ldr	r3, [pc, #332]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002860:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002862:	e098      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002864:	4b4f      	ldr	r3, [pc, #316]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800286c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800286e:	4b4d      	ldr	r3, [pc, #308]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d028      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800287a:	4b4a      	ldr	r3, [pc, #296]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	099b      	lsrs	r3, r3, #6
 8002880:	2200      	movs	r2, #0
 8002882:	623b      	str	r3, [r7, #32]
 8002884:	627a      	str	r2, [r7, #36]	@ 0x24
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800288c:	2100      	movs	r1, #0
 800288e:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x188>)
 8002890:	fb03 f201 	mul.w	r2, r3, r1
 8002894:	2300      	movs	r3, #0
 8002896:	fb00 f303 	mul.w	r3, r0, r3
 800289a:	4413      	add	r3, r2
 800289c:	4a43      	ldr	r2, [pc, #268]	@ (80029ac <HAL_RCC_GetSysClockFreq+0x188>)
 800289e:	fba0 1202 	umull	r1, r2, r0, r2
 80028a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028a4:	460a      	mov	r2, r1
 80028a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80028a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028aa:	4413      	add	r3, r2
 80028ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b0:	2200      	movs	r2, #0
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	61fa      	str	r2, [r7, #28]
 80028b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80028be:	f7fe f8cd 	bl	8000a5c <__aeabi_uldivmod>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4613      	mov	r3, r2
 80028c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ca:	e053      	b.n	8002974 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028cc:	4b35      	ldr	r3, [pc, #212]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	2200      	movs	r2, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	617a      	str	r2, [r7, #20]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80028de:	f04f 0b00 	mov.w	fp, #0
 80028e2:	4652      	mov	r2, sl
 80028e4:	465b      	mov	r3, fp
 80028e6:	f04f 0000 	mov.w	r0, #0
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	0159      	lsls	r1, r3, #5
 80028f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f4:	0150      	lsls	r0, r2, #5
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	ebb2 080a 	subs.w	r8, r2, sl
 80028fe:	eb63 090b 	sbc.w	r9, r3, fp
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800290e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002912:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002916:	ebb2 0408 	subs.w	r4, r2, r8
 800291a:	eb63 0509 	sbc.w	r5, r3, r9
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	00eb      	lsls	r3, r5, #3
 8002928:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800292c:	00e2      	lsls	r2, r4, #3
 800292e:	4614      	mov	r4, r2
 8002930:	461d      	mov	r5, r3
 8002932:	eb14 030a 	adds.w	r3, r4, sl
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	eb45 030b 	adc.w	r3, r5, fp
 800293c:	607b      	str	r3, [r7, #4]
 800293e:	f04f 0200 	mov.w	r2, #0
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800294a:	4629      	mov	r1, r5
 800294c:	028b      	lsls	r3, r1, #10
 800294e:	4621      	mov	r1, r4
 8002950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002954:	4621      	mov	r1, r4
 8002956:	028a      	lsls	r2, r1, #10
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295e:	2200      	movs	r2, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	60fa      	str	r2, [r7, #12]
 8002964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002968:	f7fe f878 	bl	8000a5c <__aeabi_uldivmod>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4613      	mov	r3, r2
 8002972:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	3301      	adds	r3, #1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002984:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800298e:	e002      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8002992:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002998:	4618      	mov	r0, r3
 800299a:	3740      	adds	r7, #64	@ 0x40
 800299c:	46bd      	mov	sp, r7
 800299e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	00f42400 	.word	0x00f42400
 80029ac:	017d7840 	.word	0x017d7840

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	@ (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	@ (80029e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	@ (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08006044 	.word	0x08006044

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029f4:	f7ff ffdc 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0b5b      	lsrs	r3, r3, #13
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08006044 	.word	0x08006044

08002a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e041      	b.n	8002aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fe fc7e 	bl	8001340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4610      	mov	r0, r2
 8002a58:	f000 fe88 	bl	800376c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d001      	beq.n	8002ad0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e03c      	b.n	8002b4a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a1e      	ldr	r2, [pc, #120]	@ (8002b58 <HAL_TIM_Base_Start+0xa0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d018      	beq.n	8002b14 <HAL_TIM_Base_Start+0x5c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aea:	d013      	beq.n	8002b14 <HAL_TIM_Base_Start+0x5c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1a      	ldr	r2, [pc, #104]	@ (8002b5c <HAL_TIM_Base_Start+0xa4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d00e      	beq.n	8002b14 <HAL_TIM_Base_Start+0x5c>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a19      	ldr	r2, [pc, #100]	@ (8002b60 <HAL_TIM_Base_Start+0xa8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d009      	beq.n	8002b14 <HAL_TIM_Base_Start+0x5c>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a17      	ldr	r2, [pc, #92]	@ (8002b64 <HAL_TIM_Base_Start+0xac>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_TIM_Base_Start+0x5c>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a16      	ldr	r2, [pc, #88]	@ (8002b68 <HAL_TIM_Base_Start+0xb0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d111      	bne.n	8002b38 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d010      	beq.n	8002b48 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b36:	e007      	b.n	8002b48 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40000c00 	.word	0x40000c00
 8002b68:	40014000 	.word	0x40014000

08002b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e041      	b.n	8002c02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f839 	bl	8002c0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f000 fdde 	bl	800376c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_TIM_PWM_Start+0x24>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e022      	b.n	8002c8a <HAL_TIM_PWM_Start+0x6a>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d109      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x3e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	bf14      	ite	ne
 8002c56:	2301      	movne	r3, #1
 8002c58:	2300      	moveq	r3, #0
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	e015      	b.n	8002c8a <HAL_TIM_PWM_Start+0x6a>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d109      	bne.n	8002c78 <HAL_TIM_PWM_Start+0x58>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e008      	b.n	8002c8a <HAL_TIM_PWM_Start+0x6a>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e068      	b.n	8002d64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0x82>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ca0:	e013      	b.n	8002cca <HAL_TIM_PWM_Start+0xaa>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_PWM_Start+0x92>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cb0:	e00b      	b.n	8002cca <HAL_TIM_PWM_Start+0xaa>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0xa2>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cc0:	e003      	b.n	8002cca <HAL_TIM_PWM_Start+0xaa>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	6839      	ldr	r1, [r7, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 f91a 	bl	8003f0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a23      	ldr	r2, [pc, #140]	@ (8002d6c <HAL_TIM_PWM_Start+0x14c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d107      	bne.n	8002cf2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d6c <HAL_TIM_PWM_Start+0x14c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d018      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d04:	d013      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_TIM_PWM_Start+0x150>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d00e      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a17      	ldr	r2, [pc, #92]	@ (8002d74 <HAL_TIM_PWM_Start+0x154>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a16      	ldr	r2, [pc, #88]	@ (8002d78 <HAL_TIM_PWM_Start+0x158>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d004      	beq.n	8002d2e <HAL_TIM_PWM_Start+0x10e>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a14      	ldr	r2, [pc, #80]	@ (8002d7c <HAL_TIM_PWM_Start+0x15c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d111      	bne.n	8002d52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b06      	cmp	r3, #6
 8002d3e:	d010      	beq.n	8002d62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d50:	e007      	b.n	8002d62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f042 0201 	orr.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3710      	adds	r7, #16
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800
 8002d78:	40000c00 	.word	0x40000c00
 8002d7c:	40014000 	.word	0x40014000

08002d80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e041      	b.n	8002e16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f839 	bl	8002e1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 fcd4 	bl	800376c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_IC_Start_IT+0x1e>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	e013      	b.n	8002e7a <HAL_TIM_IC_Start_IT+0x46>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_IC_Start_IT+0x2e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	e00b      	b.n	8002e7a <HAL_TIM_IC_Start_IT+0x46>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_IC_Start_IT+0x3e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e003      	b.n	8002e7a <HAL_TIM_IC_Start_IT+0x46>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d104      	bne.n	8002e8c <HAL_TIM_IC_Start_IT+0x58>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e013      	b.n	8002eb4 <HAL_TIM_IC_Start_IT+0x80>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d104      	bne.n	8002e9c <HAL_TIM_IC_Start_IT+0x68>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	e00b      	b.n	8002eb4 <HAL_TIM_IC_Start_IT+0x80>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d104      	bne.n	8002eac <HAL_TIM_IC_Start_IT+0x78>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e003      	b.n	8002eb4 <HAL_TIM_IC_Start_IT+0x80>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002eb6:	7bbb      	ldrb	r3, [r7, #14]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d102      	bne.n	8002ec2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ebc:	7b7b      	ldrb	r3, [r7, #13]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d001      	beq.n	8002ec6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0c2      	b.n	800304c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_IC_Start_IT+0xa2>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ed4:	e013      	b.n	8002efe <HAL_TIM_IC_Start_IT+0xca>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_IC_Start_IT+0xb2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ee4:	e00b      	b.n	8002efe <HAL_TIM_IC_Start_IT+0xca>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d104      	bne.n	8002ef6 <HAL_TIM_IC_Start_IT+0xc2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ef4:	e003      	b.n	8002efe <HAL_TIM_IC_Start_IT+0xca>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_IC_Start_IT+0xda>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f0c:	e013      	b.n	8002f36 <HAL_TIM_IC_Start_IT+0x102>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d104      	bne.n	8002f1e <HAL_TIM_IC_Start_IT+0xea>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f1c:	e00b      	b.n	8002f36 <HAL_TIM_IC_Start_IT+0x102>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d104      	bne.n	8002f2e <HAL_TIM_IC_Start_IT+0xfa>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f2c:	e003      	b.n	8002f36 <HAL_TIM_IC_Start_IT+0x102>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2202      	movs	r2, #2
 8002f32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d841      	bhi.n	8002fc0 <HAL_TIM_IC_Start_IT+0x18c>
 8002f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f44 <HAL_TIM_IC_Start_IT+0x110>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08002f79 	.word	0x08002f79
 8002f48:	08002fc1 	.word	0x08002fc1
 8002f4c:	08002fc1 	.word	0x08002fc1
 8002f50:	08002fc1 	.word	0x08002fc1
 8002f54:	08002f8b 	.word	0x08002f8b
 8002f58:	08002fc1 	.word	0x08002fc1
 8002f5c:	08002fc1 	.word	0x08002fc1
 8002f60:	08002fc1 	.word	0x08002fc1
 8002f64:	08002f9d 	.word	0x08002f9d
 8002f68:	08002fc1 	.word	0x08002fc1
 8002f6c:	08002fc1 	.word	0x08002fc1
 8002f70:	08002fc1 	.word	0x08002fc1
 8002f74:	08002faf 	.word	0x08002faf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0202 	orr.w	r2, r2, #2
 8002f86:	60da      	str	r2, [r3, #12]
      break;
 8002f88:	e01d      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0204 	orr.w	r2, r2, #4
 8002f98:	60da      	str	r2, [r3, #12]
      break;
 8002f9a:	e014      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0208 	orr.w	r2, r2, #8
 8002faa:	60da      	str	r2, [r3, #12]
      break;
 8002fac:	e00b      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0210 	orr.w	r2, r2, #16
 8002fbc:	60da      	str	r2, [r3, #12]
      break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d13e      	bne.n	800304a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	6839      	ldr	r1, [r7, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 ff99 	bl	8003f0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1d      	ldr	r2, [pc, #116]	@ (8003054 <HAL_TIM_IC_Start_IT+0x220>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d018      	beq.n	8003016 <HAL_TIM_IC_Start_IT+0x1e2>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fec:	d013      	beq.n	8003016 <HAL_TIM_IC_Start_IT+0x1e2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a19      	ldr	r2, [pc, #100]	@ (8003058 <HAL_TIM_IC_Start_IT+0x224>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d00e      	beq.n	8003016 <HAL_TIM_IC_Start_IT+0x1e2>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a17      	ldr	r2, [pc, #92]	@ (800305c <HAL_TIM_IC_Start_IT+0x228>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_TIM_IC_Start_IT+0x1e2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a16      	ldr	r2, [pc, #88]	@ (8003060 <HAL_TIM_IC_Start_IT+0x22c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d004      	beq.n	8003016 <HAL_TIM_IC_Start_IT+0x1e2>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a14      	ldr	r2, [pc, #80]	@ (8003064 <HAL_TIM_IC_Start_IT+0x230>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d111      	bne.n	800303a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0307 	and.w	r3, r3, #7
 8003020:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d010      	beq.n	800304a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003038:	e007      	b.n	800304a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800304a:	7bfb      	ldrb	r3, [r7, #15]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40010000 	.word	0x40010000
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800
 8003060:	40000c00 	.word	0x40000c00
 8003064:	40014000 	.word	0x40014000

08003068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d020      	beq.n	80030cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01b      	beq.n	80030cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0202 	mvn.w	r2, #2
 800309c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2201      	movs	r2, #1
 80030a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7fe fb84 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 80030b8:	e005      	b.n	80030c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fb38 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fb3f 	bl	8003744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d020      	beq.n	8003118 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01b      	beq.n	8003118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0204 	mvn.w	r2, #4
 80030e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fe fb5e 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fb12 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fb19 	bl	8003744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d020      	beq.n	8003164 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01b      	beq.n	8003164 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0208 	mvn.w	r2, #8
 8003134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2204      	movs	r2, #4
 800313a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe fb38 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8003150:	e005      	b.n	800315e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 faec 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 faf3 	bl	8003744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	2b00      	cmp	r3, #0
 800316c:	d020      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01b      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f06f 0210 	mvn.w	r2, #16
 8003180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2208      	movs	r2, #8
 8003186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fe fb12 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 800319c:	e005      	b.n	80031aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fac6 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 facd 	bl	8003744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00c      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0201 	mvn.w	r2, #1
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 faa4 	bl	800371c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 ff7a 	bl	80040ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa9e 	bl	8003758 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00c      	beq.n	8003240 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f06f 0220 	mvn.w	r2, #32
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 ff4c 	bl	80040d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003262:	2302      	movs	r3, #2
 8003264:	e088      	b.n	8003378 <HAL_TIM_IC_ConfigChannel+0x130>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d11b      	bne.n	80032ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003284:	f000 fc8a 	bl	8003b9c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 020c 	bic.w	r2, r2, #12
 8003296:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	619a      	str	r2, [r3, #24]
 80032aa:	e060      	b.n	800336e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d11c      	bne.n	80032ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80032c2:	f000 fd02 	bl	8003cca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80032d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6999      	ldr	r1, [r3, #24]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	021a      	lsls	r2, r3, #8
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	619a      	str	r2, [r3, #24]
 80032ea:	e040      	b.n	800336e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d11b      	bne.n	800332a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003302:	f000 fd4f 	bl	8003da4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	69da      	ldr	r2, [r3, #28]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 020c 	bic.w	r2, r2, #12
 8003314:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69d9      	ldr	r1, [r3, #28]
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	61da      	str	r2, [r3, #28]
 8003328:	e021      	b.n	800336e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d11c      	bne.n	800336a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003340:	f000 fd6c 	bl	8003e1c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003352:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	69d9      	ldr	r1, [r3, #28]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	021a      	lsls	r2, r3, #8
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
 8003368:	e001      	b.n	800336e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003376:	7dfb      	ldrb	r3, [r7, #23]
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800338c:	2300      	movs	r3, #0
 800338e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003396:	2b01      	cmp	r3, #1
 8003398:	d101      	bne.n	800339e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800339a:	2302      	movs	r3, #2
 800339c:	e0ae      	b.n	80034fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	f200 809f 	bhi.w	80034ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80033ae:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033e9 	.word	0x080033e9
 80033b8:	080034ed 	.word	0x080034ed
 80033bc:	080034ed 	.word	0x080034ed
 80033c0:	080034ed 	.word	0x080034ed
 80033c4:	08003429 	.word	0x08003429
 80033c8:	080034ed 	.word	0x080034ed
 80033cc:	080034ed 	.word	0x080034ed
 80033d0:	080034ed 	.word	0x080034ed
 80033d4:	0800346b 	.word	0x0800346b
 80033d8:	080034ed 	.word	0x080034ed
 80033dc:	080034ed 	.word	0x080034ed
 80033e0:	080034ed 	.word	0x080034ed
 80033e4:	080034ab 	.word	0x080034ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fa48 	bl	8003884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0208 	orr.w	r2, r2, #8
 8003402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0204 	bic.w	r2, r2, #4
 8003412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6999      	ldr	r1, [r3, #24]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691a      	ldr	r2, [r3, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	619a      	str	r2, [r3, #24]
      break;
 8003426:	e064      	b.n	80034f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fa8e 	bl	8003950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6999      	ldr	r1, [r3, #24]
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	021a      	lsls	r2, r3, #8
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	619a      	str	r2, [r3, #24]
      break;
 8003468:	e043      	b.n	80034f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68b9      	ldr	r1, [r7, #8]
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fad9 	bl	8003a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0208 	orr.w	r2, r2, #8
 8003484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0204 	bic.w	r2, r2, #4
 8003494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69d9      	ldr	r1, [r3, #28]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	61da      	str	r2, [r3, #28]
      break;
 80034a8:	e023      	b.n	80034f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fb23 	bl	8003afc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69da      	ldr	r2, [r3, #28]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69d9      	ldr	r1, [r3, #28]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	021a      	lsls	r2, r3, #8
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	430a      	orrs	r2, r1
 80034e8:	61da      	str	r2, [r3, #28]
      break;
 80034ea:	e002      	b.n	80034f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	75fb      	strb	r3, [r7, #23]
      break;
 80034f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_TIM_ConfigClockSource+0x1c>
 800351c:	2302      	movs	r3, #2
 800351e:	e0b4      	b.n	800368a <HAL_TIM_ConfigClockSource+0x186>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800353e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003558:	d03e      	beq.n	80035d8 <HAL_TIM_ConfigClockSource+0xd4>
 800355a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800355e:	f200 8087 	bhi.w	8003670 <HAL_TIM_ConfigClockSource+0x16c>
 8003562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003566:	f000 8086 	beq.w	8003676 <HAL_TIM_ConfigClockSource+0x172>
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356e:	d87f      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x16c>
 8003570:	2b70      	cmp	r3, #112	@ 0x70
 8003572:	d01a      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0xa6>
 8003574:	2b70      	cmp	r3, #112	@ 0x70
 8003576:	d87b      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x16c>
 8003578:	2b60      	cmp	r3, #96	@ 0x60
 800357a:	d050      	beq.n	800361e <HAL_TIM_ConfigClockSource+0x11a>
 800357c:	2b60      	cmp	r3, #96	@ 0x60
 800357e:	d877      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x16c>
 8003580:	2b50      	cmp	r3, #80	@ 0x50
 8003582:	d03c      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0xfa>
 8003584:	2b50      	cmp	r3, #80	@ 0x50
 8003586:	d873      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x16c>
 8003588:	2b40      	cmp	r3, #64	@ 0x40
 800358a:	d058      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x13a>
 800358c:	2b40      	cmp	r3, #64	@ 0x40
 800358e:	d86f      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x16c>
 8003590:	2b30      	cmp	r3, #48	@ 0x30
 8003592:	d064      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x15a>
 8003594:	2b30      	cmp	r3, #48	@ 0x30
 8003596:	d86b      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x16c>
 8003598:	2b20      	cmp	r3, #32
 800359a:	d060      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x15a>
 800359c:	2b20      	cmp	r3, #32
 800359e:	d867      	bhi.n	8003670 <HAL_TIM_ConfigClockSource+0x16c>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d05c      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x15a>
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d05a      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x15a>
 80035a8:	e062      	b.n	8003670 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035ba:	f000 fc87 	bl	8003ecc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80035cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	609a      	str	r2, [r3, #8]
      break;
 80035d6:	e04f      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035e8:	f000 fc70 	bl	8003ecc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035fa:	609a      	str	r2, [r3, #8]
      break;
 80035fc:	e03c      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360a:	461a      	mov	r2, r3
 800360c:	f000 fb2e 	bl	8003c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2150      	movs	r1, #80	@ 0x50
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fc3d 	bl	8003e96 <TIM_ITRx_SetConfig>
      break;
 800361c:	e02c      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800362a:	461a      	mov	r2, r3
 800362c:	f000 fb8a 	bl	8003d44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2160      	movs	r1, #96	@ 0x60
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fc2d 	bl	8003e96 <TIM_ITRx_SetConfig>
      break;
 800363c:	e01c      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364a:	461a      	mov	r2, r3
 800364c:	f000 fb0e 	bl	8003c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2140      	movs	r1, #64	@ 0x40
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fc1d 	bl	8003e96 <TIM_ITRx_SetConfig>
      break;
 800365c:	e00c      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4619      	mov	r1, r3
 8003668:	4610      	mov	r0, r2
 800366a:	f000 fc14 	bl	8003e96 <TIM_ITRx_SetConfig>
      break;
 800366e:	e003      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e000      	b.n	8003678 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b0c      	cmp	r3, #12
 80036a6:	d831      	bhi.n	800370c <HAL_TIM_ReadCapturedValue+0x78>
 80036a8:	a201      	add	r2, pc, #4	@ (adr r2, 80036b0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036e5 	.word	0x080036e5
 80036b4:	0800370d 	.word	0x0800370d
 80036b8:	0800370d 	.word	0x0800370d
 80036bc:	0800370d 	.word	0x0800370d
 80036c0:	080036ef 	.word	0x080036ef
 80036c4:	0800370d 	.word	0x0800370d
 80036c8:	0800370d 	.word	0x0800370d
 80036cc:	0800370d 	.word	0x0800370d
 80036d0:	080036f9 	.word	0x080036f9
 80036d4:	0800370d 	.word	0x0800370d
 80036d8:	0800370d 	.word	0x0800370d
 80036dc:	0800370d 	.word	0x0800370d
 80036e0:	08003703 	.word	0x08003703
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	60fb      	str	r3, [r7, #12]

      break;
 80036ec:	e00f      	b.n	800370e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f4:	60fb      	str	r3, [r7, #12]

      break;
 80036f6:	e00a      	b.n	800370e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fe:	60fb      	str	r3, [r7, #12]

      break;
 8003700:	e005      	b.n	800370e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003708:	60fb      	str	r3, [r7, #12]

      break;
 800370a:	e000      	b.n	800370e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800370c:	bf00      	nop
  }

  return tmpreg;
 800370e:	68fb      	ldr	r3, [r7, #12]
}
 8003710:	4618      	mov	r0, r3
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a3a      	ldr	r2, [pc, #232]	@ (8003868 <TIM_Base_SetConfig+0xfc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00f      	beq.n	80037a4 <TIM_Base_SetConfig+0x38>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800378a:	d00b      	beq.n	80037a4 <TIM_Base_SetConfig+0x38>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a37      	ldr	r2, [pc, #220]	@ (800386c <TIM_Base_SetConfig+0x100>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d007      	beq.n	80037a4 <TIM_Base_SetConfig+0x38>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a36      	ldr	r2, [pc, #216]	@ (8003870 <TIM_Base_SetConfig+0x104>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d003      	beq.n	80037a4 <TIM_Base_SetConfig+0x38>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a35      	ldr	r2, [pc, #212]	@ (8003874 <TIM_Base_SetConfig+0x108>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003868 <TIM_Base_SetConfig+0xfc>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01b      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c4:	d017      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a28      	ldr	r2, [pc, #160]	@ (800386c <TIM_Base_SetConfig+0x100>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a27      	ldr	r2, [pc, #156]	@ (8003870 <TIM_Base_SetConfig+0x104>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00f      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a26      	ldr	r2, [pc, #152]	@ (8003874 <TIM_Base_SetConfig+0x108>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d00b      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a25      	ldr	r2, [pc, #148]	@ (8003878 <TIM_Base_SetConfig+0x10c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d007      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a24      	ldr	r2, [pc, #144]	@ (800387c <TIM_Base_SetConfig+0x110>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d003      	beq.n	80037f6 <TIM_Base_SetConfig+0x8a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a23      	ldr	r2, [pc, #140]	@ (8003880 <TIM_Base_SetConfig+0x114>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d108      	bne.n	8003808 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	4313      	orrs	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a0e      	ldr	r2, [pc, #56]	@ (8003868 <TIM_Base_SetConfig+0xfc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d103      	bne.n	800383c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b01      	cmp	r3, #1
 800384c:	d105      	bne.n	800385a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	f023 0201 	bic.w	r2, r3, #1
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	611a      	str	r2, [r3, #16]
  }
}
 800385a:	bf00      	nop
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40010000 	.word	0x40010000
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800
 8003874:	40000c00 	.word	0x40000c00
 8003878:	40014000 	.word	0x40014000
 800387c:	40014400 	.word	0x40014400
 8003880:	40014800 	.word	0x40014800

08003884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f023 0201 	bic.w	r2, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0303 	bic.w	r3, r3, #3
 80038ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 0302 	bic.w	r3, r3, #2
 80038cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a1c      	ldr	r2, [pc, #112]	@ (800394c <TIM_OC1_SetConfig+0xc8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10c      	bne.n	80038fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f023 0308 	bic.w	r3, r3, #8
 80038e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f023 0304 	bic.w	r3, r3, #4
 80038f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a13      	ldr	r2, [pc, #76]	@ (800394c <TIM_OC1_SetConfig+0xc8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d111      	bne.n	8003926 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003908:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003910:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	621a      	str	r2, [r3, #32]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40010000 	.word	0x40010000

08003950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 0210 	bic.w	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f023 0320 	bic.w	r3, r3, #32
 800399a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	011b      	lsls	r3, r3, #4
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003a24 <TIM_OC2_SetConfig+0xd4>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d10d      	bne.n	80039cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a15      	ldr	r2, [pc, #84]	@ (8003a24 <TIM_OC2_SetConfig+0xd4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d113      	bne.n	80039fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80039da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80039e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	693a      	ldr	r2, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	621a      	str	r2, [r3, #32]
}
 8003a16:	bf00      	nop
 8003a18:	371c      	adds	r7, #28
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40010000 	.word	0x40010000

08003a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	021b      	lsls	r3, r3, #8
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a1d      	ldr	r2, [pc, #116]	@ (8003af8 <TIM_OC3_SetConfig+0xd0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d10d      	bne.n	8003aa2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	@ (8003af8 <TIM_OC3_SetConfig+0xd0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d113      	bne.n	8003ad2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	621a      	str	r2, [r3, #32]
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	40010000 	.word	0x40010000

08003afc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	031b      	lsls	r3, r3, #12
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a10      	ldr	r2, [pc, #64]	@ (8003b98 <TIM_OC4_SetConfig+0x9c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d109      	bne.n	8003b70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	621a      	str	r2, [r3, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000

08003b9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f023 0201 	bic.w	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4a24      	ldr	r2, [pc, #144]	@ (8003c58 <TIM_TI1_SetConfig+0xbc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <TIM_TI1_SetConfig+0x56>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd0:	d00f      	beq.n	8003bf2 <TIM_TI1_SetConfig+0x56>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a21      	ldr	r2, [pc, #132]	@ (8003c5c <TIM_TI1_SetConfig+0xc0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <TIM_TI1_SetConfig+0x56>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	@ (8003c60 <TIM_TI1_SetConfig+0xc4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <TIM_TI1_SetConfig+0x56>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c64 <TIM_TI1_SetConfig+0xc8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_TI1_SetConfig+0x56>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a1e      	ldr	r2, [pc, #120]	@ (8003c68 <TIM_TI1_SetConfig+0xcc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d101      	bne.n	8003bf6 <TIM_TI1_SetConfig+0x5a>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <TIM_TI1_SetConfig+0x5c>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0303 	bic.w	r3, r3, #3
 8003c02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e003      	b.n	8003c16 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f023 030a 	bic.w	r3, r3, #10
 8003c30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f003 030a 	and.w	r3, r3, #10
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	621a      	str	r2, [r3, #32]
}
 8003c4a:	bf00      	nop
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40010000 	.word	0x40010000
 8003c5c:	40000400 	.word	0x40000400
 8003c60:	40000800 	.word	0x40000800
 8003c64:	40000c00 	.word	0x40000c00
 8003c68:	40014000 	.word	0x40014000

08003c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	f023 0201 	bic.w	r2, r3, #1
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f023 030a 	bic.w	r3, r3, #10
 8003ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	621a      	str	r2, [r3, #32]
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b087      	sub	sp, #28
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
 8003cd6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f023 0210 	bic.w	r2, r3, #16
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	031b      	lsls	r3, r3, #12
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	f023 0210 	bic.w	r2, r3, #16
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	031b      	lsls	r3, r3, #12
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	621a      	str	r2, [r3, #32]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f023 0303 	bic.w	r3, r3, #3
 8003dd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003de0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	621a      	str	r2, [r3, #32]
}
 8003e10:	bf00      	nop
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e48:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e5a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	031b      	lsls	r3, r3, #12
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003e6e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	031b      	lsls	r3, r3, #12
 8003e74:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f043 0307 	orr.w	r3, r3, #7
 8003eb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	609a      	str	r2, [r3, #8]
}
 8003ec0:	bf00      	nop
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	021a      	lsls	r2, r3, #8
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	609a      	str	r2, [r3, #8]
}
 8003f00:	bf00      	nop
 8003f02:	371c      	adds	r7, #28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f003 031f 	and.w	r3, r3, #31
 8003f1e:	2201      	movs	r2, #1
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a1a      	ldr	r2, [r3, #32]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	401a      	ands	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1a      	ldr	r2, [r3, #32]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	431a      	orrs	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
	...

08003f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e050      	b.n	8004012 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	@ (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbc:	d013      	beq.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a18      	ldr	r2, [pc, #96]	@ (8004024 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a16      	ldr	r2, [pc, #88]	@ (8004028 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a15      	ldr	r2, [pc, #84]	@ (800402c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a13      	ldr	r2, [pc, #76]	@ (8004030 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10c      	bne.n	8004000 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	40010000 	.word	0x40010000
 8004024:	40000400 	.word	0x40000400
 8004028:	40000800 	.word	0x40000800
 800402c:	40000c00 	.word	0x40000c00
 8004030:	40014000 	.word	0x40014000

08004034 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800404c:	2302      	movs	r3, #2
 800404e:	e03d      	b.n	80040cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e042      	b.n	8004198 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7fd f9c0 	bl	80014ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	@ 0x24
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004142:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fdbd 	bl	8004cc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004158:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	695a      	ldr	r2, [r3, #20]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004168:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004178:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	@ 0x28
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d175      	bne.n	80042ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_UART_Transmit+0x2c>
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e06e      	b.n	80042ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2221      	movs	r2, #33	@ 0x21
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041de:	f7fd fc51 	bl	8001a84 <HAL_GetTick>
 80041e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	88fa      	ldrh	r2, [r7, #6]
 80041e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	88fa      	ldrh	r2, [r7, #6]
 80041ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041f8:	d108      	bne.n	800420c <HAL_UART_Transmit+0x6c>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e003      	b.n	8004214 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004210:	2300      	movs	r3, #0
 8004212:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004214:	e02e      	b.n	8004274 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2200      	movs	r2, #0
 800421e:	2180      	movs	r1, #128	@ 0x80
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fb1f 	bl	8004864 <UART_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e03a      	b.n	80042ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10b      	bne.n	8004256 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	881b      	ldrh	r3, [r3, #0]
 8004242:	461a      	mov	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800424c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	3302      	adds	r3, #2
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e007      	b.n	8004266 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	781a      	ldrb	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1cb      	bne.n	8004216 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2200      	movs	r2, #0
 8004286:	2140      	movs	r1, #64	@ 0x40
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 faeb 	bl	8004864 <UART_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e006      	b.n	80042ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3720      	adds	r7, #32
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	4613      	mov	r3, r2
 80042c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d112      	bne.n	80042f6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_UART_Receive_IT+0x26>
 80042d6:	88fb      	ldrh	r3, [r7, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e00b      	b.n	80042f8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	461a      	mov	r2, r3
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 fb12 	bl	8004916 <UART_Start_Receive_IT>
 80042f2:	4603      	mov	r3, r0
 80042f4:	e000      	b.n	80042f8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80042f6:	2302      	movs	r3, #2
  }
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b0ba      	sub	sp, #232	@ 0xe8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800433e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_UART_IRQHandler+0x66>
 8004352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fbf2 	bl	8004b48 <UART_Receive_IT>
      return;
 8004364:	e25b      	b.n	800481e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 80de 	beq.w	800452c <HAL_UART_IRQHandler+0x22c>
 8004370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800437c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004380:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80d1 	beq.w	800452c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800438a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_UART_IRQHandler+0xae>
 8004396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800439a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a6:	f043 0201 	orr.w	r2, r3, #1
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_UART_IRQHandler+0xd2>
 80043ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d005      	beq.n	80043d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ca:	f043 0202 	orr.w	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00b      	beq.n	80043f6 <HAL_UART_IRQHandler+0xf6>
 80043de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d005      	beq.n	80043f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	f043 0204 	orr.w	r2, r3, #4
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d011      	beq.n	8004426 <HAL_UART_IRQHandler+0x126>
 8004402:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800440e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d005      	beq.n	8004426 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	f043 0208 	orr.w	r2, r3, #8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 81f2 	beq.w	8004814 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <HAL_UART_IRQHandler+0x14e>
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fb7d 	bl	8004b48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b40      	cmp	r3, #64	@ 0x40
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <HAL_UART_IRQHandler+0x17a>
 8004472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004476:	2b00      	cmp	r3, #0
 8004478:	d04f      	beq.n	800451a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 fa85 	bl	800498a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448a:	2b40      	cmp	r3, #64	@ 0x40
 800448c:	d141      	bne.n	8004512 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3314      	adds	r3, #20
 8004494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3314      	adds	r3, #20
 80044b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1d9      	bne.n	800448e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d013      	beq.n	800450a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e6:	4a7e      	ldr	r2, [pc, #504]	@ (80046e0 <HAL_UART_IRQHandler+0x3e0>)
 80044e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd fc79 	bl	8001de6 <HAL_DMA_Abort_IT>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004504:	4610      	mov	r0, r2
 8004506:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e00e      	b.n	8004528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f994 	bl	8004838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	e00a      	b.n	8004528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f990 	bl	8004838 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	e006      	b.n	8004528 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f98c 	bl	8004838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004526:	e175      	b.n	8004814 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004528:	bf00      	nop
    return;
 800452a:	e173      	b.n	8004814 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004530:	2b01      	cmp	r3, #1
 8004532:	f040 814f 	bne.w	80047d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 8148 	beq.w	80047d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 8141 	beq.w	80047d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004552:	2300      	movs	r3, #0
 8004554:	60bb      	str	r3, [r7, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	60bb      	str	r3, [r7, #8]
 8004566:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004572:	2b40      	cmp	r3, #64	@ 0x40
 8004574:	f040 80b6 	bne.w	80046e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004584:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 8145 	beq.w	8004818 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004592:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004596:	429a      	cmp	r2, r3
 8004598:	f080 813e 	bcs.w	8004818 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ae:	f000 8088 	beq.w	80046c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80045de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1d9      	bne.n	80045b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3314      	adds	r3, #20
 8004604:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800460e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004622:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004626:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800462a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e1      	bne.n	80045fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3314      	adds	r3, #20
 8004640:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004642:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004644:	e853 3f00 	ldrex	r3, [r3]
 8004648:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800464a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800464c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004650:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3314      	adds	r3, #20
 800465a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800465e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004660:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004662:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004664:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004666:	e841 2300 	strex	r3, r2, [r1]
 800466a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800466c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e3      	bne.n	800463a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2220      	movs	r2, #32
 8004676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	330c      	adds	r3, #12
 8004686:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004690:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004692:	f023 0310 	bic.w	r3, r3, #16
 8004696:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80046a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80046a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046ac:	e841 2300 	strex	r3, r2, [r1]
 80046b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1e3      	bne.n	8004680 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fd fb22 	bl	8001d06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2202      	movs	r2, #2
 80046c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	4619      	mov	r1, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8b7 	bl	800484c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046de:	e09b      	b.n	8004818 <HAL_UART_IRQHandler+0x518>
 80046e0:	08004a51 	.word	0x08004a51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 808e 	beq.w	800481c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004700:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 8089 	beq.w	800481c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004720:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	330c      	adds	r3, #12
 800472a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800472e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004730:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004732:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004734:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004736:	e841 2300 	strex	r3, r2, [r1]
 800473a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800473c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1e3      	bne.n	800470a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3314      	adds	r3, #20
 8004748:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	e853 3f00 	ldrex	r3, [r3]
 8004750:	623b      	str	r3, [r7, #32]
   return(result);
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	f023 0301 	bic.w	r3, r3, #1
 8004758:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3314      	adds	r3, #20
 8004762:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004766:	633a      	str	r2, [r7, #48]	@ 0x30
 8004768:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800476c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800476e:	e841 2300 	strex	r3, r2, [r1]
 8004772:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e3      	bne.n	8004742 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	60fb      	str	r3, [r7, #12]
   return(result);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0310 	bic.w	r3, r3, #16
 800479e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	330c      	adds	r3, #12
 80047a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80047ac:	61fa      	str	r2, [r7, #28]
 80047ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b0:	69b9      	ldr	r1, [r7, #24]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	e841 2300 	strex	r3, r2, [r1]
 80047b8:	617b      	str	r3, [r7, #20]
   return(result);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e3      	bne.n	8004788 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047ca:	4619      	mov	r1, r3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f83d 	bl	800484c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047d2:	e023      	b.n	800481c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <HAL_UART_IRQHandler+0x4f4>
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f943 	bl	8004a78 <UART_Transmit_IT>
    return;
 80047f2:	e014      	b.n	800481e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00e      	beq.n	800481e <HAL_UART_IRQHandler+0x51e>
 8004800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f983 	bl	8004b18 <UART_EndTransmit_IT>
    return;
 8004812:	e004      	b.n	800481e <HAL_UART_IRQHandler+0x51e>
    return;
 8004814:	bf00      	nop
 8004816:	e002      	b.n	800481e <HAL_UART_IRQHandler+0x51e>
      return;
 8004818:	bf00      	nop
 800481a:	e000      	b.n	800481e <HAL_UART_IRQHandler+0x51e>
      return;
 800481c:	bf00      	nop
  }
}
 800481e:	37e8      	adds	r7, #232	@ 0xe8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	4613      	mov	r3, r2
 8004872:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004874:	e03b      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d037      	beq.n	80048ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800487e:	f7fd f901 	bl	8001a84 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	6a3a      	ldr	r2, [r7, #32]
 800488a:	429a      	cmp	r2, r3
 800488c:	d302      	bcc.n	8004894 <UART_WaitOnFlagUntilTimeout+0x30>
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e03a      	b.n	800490e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d023      	beq.n	80048ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	2b80      	cmp	r3, #128	@ 0x80
 80048aa:	d020      	beq.n	80048ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b40      	cmp	r3, #64	@ 0x40
 80048b0:	d01d      	beq.n	80048ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d116      	bne.n	80048ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	617b      	str	r3, [r7, #20]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f857 	bl	800498a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2208      	movs	r2, #8
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e00f      	b.n	800490e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4013      	ands	r3, r2
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	429a      	cmp	r2, r3
 800490a:	d0b4      	beq.n	8004876 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004916:	b480      	push	{r7}
 8004918:	b085      	sub	sp, #20
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	4613      	mov	r3, r2
 8004922:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2222      	movs	r2, #34	@ 0x22
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68da      	ldr	r2, [r3, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0220 	orr.w	r2, r2, #32
 800497a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800498a:	b480      	push	{r7}
 800498c:	b095      	sub	sp, #84	@ 0x54
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80049b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80049b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e5      	bne.n	8004992 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3314      	adds	r3, #20
 80049cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3314      	adds	r3, #20
 80049e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e5      	bne.n	80049c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d119      	bne.n	8004a36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	330c      	adds	r3, #12
 8004a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	e853 3f00 	ldrex	r3, [r3]
 8004a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	f023 0310 	bic.w	r3, r3, #16
 8004a18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a22:	61ba      	str	r2, [r7, #24]
 8004a24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a26:	6979      	ldr	r1, [r7, #20]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e5      	bne.n	8004a02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004a44:	bf00      	nop
 8004a46:	3754      	adds	r7, #84	@ 0x54
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff fee4 	bl	8004838 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b21      	cmp	r3, #33	@ 0x21
 8004a8a:	d13e      	bne.n	8004b0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a94:	d114      	bne.n	8004ac0 <UART_Transmit_IT+0x48>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d110      	bne.n	8004ac0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ab2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	1c9a      	adds	r2, r3, #2
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	621a      	str	r2, [r3, #32]
 8004abe:	e008      	b.n	8004ad2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6211      	str	r1, [r2, #32]
 8004aca:	781a      	ldrb	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10f      	bne.n	8004b06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004af4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b06:	2300      	movs	r3, #0
 8004b08:	e000      	b.n	8004b0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b0a:	2302      	movs	r3, #2
  }
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff fe73 	bl	8004824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3708      	adds	r7, #8
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b08c      	sub	sp, #48	@ 0x30
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b22      	cmp	r3, #34	@ 0x22
 8004b5a:	f040 80ae 	bne.w	8004cba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b66:	d117      	bne.n	8004b98 <UART_Receive_IT+0x50>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d113      	bne.n	8004b98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b78:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b90:	1c9a      	adds	r2, r3, #2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b96:	e026      	b.n	8004be6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004baa:	d007      	beq.n	8004bbc <UART_Receive_IT+0x74>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <UART_Receive_IT+0x82>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e008      	b.n	8004bdc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d15d      	bne.n	8004cb6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0220 	bic.w	r2, r2, #32
 8004c08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695a      	ldr	r2, [r3, #20]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d135      	bne.n	8004cac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	613b      	str	r3, [r7, #16]
   return(result);
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f023 0310 	bic.w	r3, r3, #16
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c66:	623a      	str	r2, [r7, #32]
 8004c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	69f9      	ldr	r1, [r7, #28]
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e5      	bne.n	8004c46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0310 	and.w	r3, r3, #16
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d10a      	bne.n	8004c9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff fdd1 	bl	800484c <HAL_UARTEx_RxEventCallback>
 8004caa:	e002      	b.n	8004cb2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7fc fd41 	bl	8001734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e002      	b.n	8004cbc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e000      	b.n	8004cbc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004cba:	2302      	movs	r3, #2
  }
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3730      	adds	r7, #48	@ 0x30
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cc8:	b0c0      	sub	sp, #256	@ 0x100
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce0:	68d9      	ldr	r1, [r3, #12]
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	ea40 0301 	orr.w	r3, r0, r1
 8004cec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d1c:	f021 010c 	bic.w	r1, r1, #12
 8004d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3e:	6999      	ldr	r1, [r3, #24]
 8004d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	ea40 0301 	orr.w	r3, r0, r1
 8004d4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b8f      	ldr	r3, [pc, #572]	@ (8004f90 <UART_SetConfig+0x2cc>)
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d005      	beq.n	8004d64 <UART_SetConfig+0xa0>
 8004d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004f94 <UART_SetConfig+0x2d0>)
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d104      	bne.n	8004d6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d64:	f7fd fe44 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 8004d68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004d6c:	e003      	b.n	8004d76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d6e:	f7fd fe2b 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8004d72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d80:	f040 810c 	bne.w	8004f9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004d92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d96:	4622      	mov	r2, r4
 8004d98:	462b      	mov	r3, r5
 8004d9a:	1891      	adds	r1, r2, r2
 8004d9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d9e:	415b      	adcs	r3, r3
 8004da0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004da2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004da6:	4621      	mov	r1, r4
 8004da8:	eb12 0801 	adds.w	r8, r2, r1
 8004dac:	4629      	mov	r1, r5
 8004dae:	eb43 0901 	adc.w	r9, r3, r1
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dc6:	4690      	mov	r8, r2
 8004dc8:	4699      	mov	r9, r3
 8004dca:	4623      	mov	r3, r4
 8004dcc:	eb18 0303 	adds.w	r3, r8, r3
 8004dd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	eb49 0303 	adc.w	r3, r9, r3
 8004dda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004dea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004dee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004df2:	460b      	mov	r3, r1
 8004df4:	18db      	adds	r3, r3, r3
 8004df6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004df8:	4613      	mov	r3, r2
 8004dfa:	eb42 0303 	adc.w	r3, r2, r3
 8004dfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e08:	f7fb fe28 	bl	8000a5c <__aeabi_uldivmod>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4b61      	ldr	r3, [pc, #388]	@ (8004f98 <UART_SetConfig+0x2d4>)
 8004e12:	fba3 2302 	umull	r2, r3, r3, r2
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	011c      	lsls	r4, r3, #4
 8004e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	464b      	mov	r3, r9
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e34:	415b      	adcs	r3, r3
 8004e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004e42:	4649      	mov	r1, r9
 8004e44:	eb43 0b01 	adc.w	fp, r3, r1
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e5c:	4692      	mov	sl, r2
 8004e5e:	469b      	mov	fp, r3
 8004e60:	4643      	mov	r3, r8
 8004e62:	eb1a 0303 	adds.w	r3, sl, r3
 8004e66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004e70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004e84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	18db      	adds	r3, r3, r3
 8004e8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e8e:	4613      	mov	r3, r2
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e9e:	f7fb fddd 	bl	8000a5c <__aeabi_uldivmod>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8004f98 <UART_SetConfig+0x2d4>)
 8004eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2264      	movs	r2, #100	@ 0x64
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	1acb      	subs	r3, r1, r3
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004ebe:	4b36      	ldr	r3, [pc, #216]	@ (8004f98 <UART_SetConfig+0x2d4>)
 8004ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec4:	095b      	lsrs	r3, r3, #5
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ecc:	441c      	add	r4, r3
 8004ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004edc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	1891      	adds	r1, r2, r2
 8004ee6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ee8:	415b      	adcs	r3, r3
 8004eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	1851      	adds	r1, r2, r1
 8004ef4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	414b      	adcs	r3, r1
 8004efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f08:	4659      	mov	r1, fp
 8004f0a:	00cb      	lsls	r3, r1, #3
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f12:	4651      	mov	r1, sl
 8004f14:	00ca      	lsls	r2, r1, #3
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f24:	464b      	mov	r3, r9
 8004f26:	460a      	mov	r2, r1
 8004f28:	eb42 0303 	adc.w	r3, r2, r3
 8004f2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004f40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004f44:	460b      	mov	r3, r1
 8004f46:	18db      	adds	r3, r3, r3
 8004f48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	eb42 0303 	adc.w	r3, r2, r3
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004f5a:	f7fb fd7f 	bl	8000a5c <__aeabi_uldivmod>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4b0d      	ldr	r3, [pc, #52]	@ (8004f98 <UART_SetConfig+0x2d4>)
 8004f64:	fba3 1302 	umull	r1, r3, r3, r2
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	2164      	movs	r1, #100	@ 0x64
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	3332      	adds	r3, #50	@ 0x32
 8004f76:	4a08      	ldr	r2, [pc, #32]	@ (8004f98 <UART_SetConfig+0x2d4>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	f003 0207 	and.w	r2, r3, #7
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4422      	add	r2, r4
 8004f8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f8c:	e106      	b.n	800519c <UART_SetConfig+0x4d8>
 8004f8e:	bf00      	nop
 8004f90:	40011000 	.word	0x40011000
 8004f94:	40011400 	.word	0x40011400
 8004f98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004fa6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004faa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004fae:	4642      	mov	r2, r8
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	1891      	adds	r1, r2, r2
 8004fb4:	6239      	str	r1, [r7, #32]
 8004fb6:	415b      	adcs	r3, r3
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	1854      	adds	r4, r2, r1
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	eb43 0501 	adc.w	r5, r3, r1
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	00eb      	lsls	r3, r5, #3
 8004fd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fd6:	00e2      	lsls	r2, r4, #3
 8004fd8:	4614      	mov	r4, r2
 8004fda:	461d      	mov	r5, r3
 8004fdc:	4643      	mov	r3, r8
 8004fde:	18e3      	adds	r3, r4, r3
 8004fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fe4:	464b      	mov	r3, r9
 8004fe6:	eb45 0303 	adc.w	r3, r5, r3
 8004fea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ffa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800500a:	4629      	mov	r1, r5
 800500c:	008b      	lsls	r3, r1, #2
 800500e:	4621      	mov	r1, r4
 8005010:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005014:	4621      	mov	r1, r4
 8005016:	008a      	lsls	r2, r1, #2
 8005018:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800501c:	f7fb fd1e 	bl	8000a5c <__aeabi_uldivmod>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4b60      	ldr	r3, [pc, #384]	@ (80051a8 <UART_SetConfig+0x4e4>)
 8005026:	fba3 2302 	umull	r2, r3, r3, r2
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	011c      	lsls	r4, r3, #4
 800502e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005032:	2200      	movs	r2, #0
 8005034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005038:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800503c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	1891      	adds	r1, r2, r2
 8005046:	61b9      	str	r1, [r7, #24]
 8005048:	415b      	adcs	r3, r3
 800504a:	61fb      	str	r3, [r7, #28]
 800504c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005050:	4641      	mov	r1, r8
 8005052:	1851      	adds	r1, r2, r1
 8005054:	6139      	str	r1, [r7, #16]
 8005056:	4649      	mov	r1, r9
 8005058:	414b      	adcs	r3, r1
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005068:	4659      	mov	r1, fp
 800506a:	00cb      	lsls	r3, r1, #3
 800506c:	4651      	mov	r1, sl
 800506e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005072:	4651      	mov	r1, sl
 8005074:	00ca      	lsls	r2, r1, #3
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	4603      	mov	r3, r0
 800507c:	4642      	mov	r2, r8
 800507e:	189b      	adds	r3, r3, r2
 8005080:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005084:	464b      	mov	r3, r9
 8005086:	460a      	mov	r2, r1
 8005088:	eb42 0303 	adc.w	r3, r2, r3
 800508c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	67bb      	str	r3, [r7, #120]	@ 0x78
 800509a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80050a8:	4649      	mov	r1, r9
 80050aa:	008b      	lsls	r3, r1, #2
 80050ac:	4641      	mov	r1, r8
 80050ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050b2:	4641      	mov	r1, r8
 80050b4:	008a      	lsls	r2, r1, #2
 80050b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80050ba:	f7fb fccf 	bl	8000a5c <__aeabi_uldivmod>
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	4b38      	ldr	r3, [pc, #224]	@ (80051a8 <UART_SetConfig+0x4e4>)
 80050c6:	fba3 2301 	umull	r2, r3, r3, r1
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	2264      	movs	r2, #100	@ 0x64
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	1acb      	subs	r3, r1, r3
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	3332      	adds	r3, #50	@ 0x32
 80050d8:	4a33      	ldr	r2, [pc, #204]	@ (80051a8 <UART_SetConfig+0x4e4>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050e4:	441c      	add	r4, r3
 80050e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ea:	2200      	movs	r2, #0
 80050ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80050ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80050f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80050f4:	4642      	mov	r2, r8
 80050f6:	464b      	mov	r3, r9
 80050f8:	1891      	adds	r1, r2, r2
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	415b      	adcs	r3, r3
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005104:	4641      	mov	r1, r8
 8005106:	1851      	adds	r1, r2, r1
 8005108:	6039      	str	r1, [r7, #0]
 800510a:	4649      	mov	r1, r9
 800510c:	414b      	adcs	r3, r1
 800510e:	607b      	str	r3, [r7, #4]
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800511c:	4659      	mov	r1, fp
 800511e:	00cb      	lsls	r3, r1, #3
 8005120:	4651      	mov	r1, sl
 8005122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005126:	4651      	mov	r1, sl
 8005128:	00ca      	lsls	r2, r1, #3
 800512a:	4610      	mov	r0, r2
 800512c:	4619      	mov	r1, r3
 800512e:	4603      	mov	r3, r0
 8005130:	4642      	mov	r2, r8
 8005132:	189b      	adds	r3, r3, r2
 8005134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005136:	464b      	mov	r3, r9
 8005138:	460a      	mov	r2, r1
 800513a:	eb42 0303 	adc.w	r3, r2, r3
 800513e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	663b      	str	r3, [r7, #96]	@ 0x60
 800514a:	667a      	str	r2, [r7, #100]	@ 0x64
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005158:	4649      	mov	r1, r9
 800515a:	008b      	lsls	r3, r1, #2
 800515c:	4641      	mov	r1, r8
 800515e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005162:	4641      	mov	r1, r8
 8005164:	008a      	lsls	r2, r1, #2
 8005166:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800516a:	f7fb fc77 	bl	8000a5c <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <UART_SetConfig+0x4e4>)
 8005174:	fba3 1302 	umull	r1, r3, r3, r2
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	2164      	movs	r1, #100	@ 0x64
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	011b      	lsls	r3, r3, #4
 8005184:	3332      	adds	r3, #50	@ 0x32
 8005186:	4a08      	ldr	r2, [pc, #32]	@ (80051a8 <UART_SetConfig+0x4e4>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	f003 020f 	and.w	r2, r3, #15
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4422      	add	r2, r4
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bf00      	nop
 800519e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80051a2:	46bd      	mov	sp, r7
 80051a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051a8:	51eb851f 	.word	0x51eb851f

080051ac <std>:
 80051ac:	2300      	movs	r3, #0
 80051ae:	b510      	push	{r4, lr}
 80051b0:	4604      	mov	r4, r0
 80051b2:	e9c0 3300 	strd	r3, r3, [r0]
 80051b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ba:	6083      	str	r3, [r0, #8]
 80051bc:	8181      	strh	r1, [r0, #12]
 80051be:	6643      	str	r3, [r0, #100]	@ 0x64
 80051c0:	81c2      	strh	r2, [r0, #14]
 80051c2:	6183      	str	r3, [r0, #24]
 80051c4:	4619      	mov	r1, r3
 80051c6:	2208      	movs	r2, #8
 80051c8:	305c      	adds	r0, #92	@ 0x5c
 80051ca:	f000 f906 	bl	80053da <memset>
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <std+0x58>)
 80051d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <std+0x5c>)
 80051d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051d6:	4b0d      	ldr	r3, [pc, #52]	@ (800520c <std+0x60>)
 80051d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <std+0x64>)
 80051dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <std+0x68>)
 80051e0:	6224      	str	r4, [r4, #32]
 80051e2:	429c      	cmp	r4, r3
 80051e4:	d006      	beq.n	80051f4 <std+0x48>
 80051e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051ea:	4294      	cmp	r4, r2
 80051ec:	d002      	beq.n	80051f4 <std+0x48>
 80051ee:	33d0      	adds	r3, #208	@ 0xd0
 80051f0:	429c      	cmp	r4, r3
 80051f2:	d105      	bne.n	8005200 <std+0x54>
 80051f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051fc:	f000 b966 	b.w	80054cc <__retarget_lock_init_recursive>
 8005200:	bd10      	pop	{r4, pc}
 8005202:	bf00      	nop
 8005204:	08005355 	.word	0x08005355
 8005208:	08005377 	.word	0x08005377
 800520c:	080053af 	.word	0x080053af
 8005210:	080053d3 	.word	0x080053d3
 8005214:	20000228 	.word	0x20000228

08005218 <stdio_exit_handler>:
 8005218:	4a02      	ldr	r2, [pc, #8]	@ (8005224 <stdio_exit_handler+0xc>)
 800521a:	4903      	ldr	r1, [pc, #12]	@ (8005228 <stdio_exit_handler+0x10>)
 800521c:	4803      	ldr	r0, [pc, #12]	@ (800522c <stdio_exit_handler+0x14>)
 800521e:	f000 b869 	b.w	80052f4 <_fwalk_sglue>
 8005222:	bf00      	nop
 8005224:	2000000c 	.word	0x2000000c
 8005228:	08005d6d 	.word	0x08005d6d
 800522c:	2000001c 	.word	0x2000001c

08005230 <cleanup_stdio>:
 8005230:	6841      	ldr	r1, [r0, #4]
 8005232:	4b0c      	ldr	r3, [pc, #48]	@ (8005264 <cleanup_stdio+0x34>)
 8005234:	4299      	cmp	r1, r3
 8005236:	b510      	push	{r4, lr}
 8005238:	4604      	mov	r4, r0
 800523a:	d001      	beq.n	8005240 <cleanup_stdio+0x10>
 800523c:	f000 fd96 	bl	8005d6c <_fflush_r>
 8005240:	68a1      	ldr	r1, [r4, #8]
 8005242:	4b09      	ldr	r3, [pc, #36]	@ (8005268 <cleanup_stdio+0x38>)
 8005244:	4299      	cmp	r1, r3
 8005246:	d002      	beq.n	800524e <cleanup_stdio+0x1e>
 8005248:	4620      	mov	r0, r4
 800524a:	f000 fd8f 	bl	8005d6c <_fflush_r>
 800524e:	68e1      	ldr	r1, [r4, #12]
 8005250:	4b06      	ldr	r3, [pc, #24]	@ (800526c <cleanup_stdio+0x3c>)
 8005252:	4299      	cmp	r1, r3
 8005254:	d004      	beq.n	8005260 <cleanup_stdio+0x30>
 8005256:	4620      	mov	r0, r4
 8005258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525c:	f000 bd86 	b.w	8005d6c <_fflush_r>
 8005260:	bd10      	pop	{r4, pc}
 8005262:	bf00      	nop
 8005264:	20000228 	.word	0x20000228
 8005268:	20000290 	.word	0x20000290
 800526c:	200002f8 	.word	0x200002f8

08005270 <global_stdio_init.part.0>:
 8005270:	b510      	push	{r4, lr}
 8005272:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <global_stdio_init.part.0+0x30>)
 8005274:	4c0b      	ldr	r4, [pc, #44]	@ (80052a4 <global_stdio_init.part.0+0x34>)
 8005276:	4a0c      	ldr	r2, [pc, #48]	@ (80052a8 <global_stdio_init.part.0+0x38>)
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	4620      	mov	r0, r4
 800527c:	2200      	movs	r2, #0
 800527e:	2104      	movs	r1, #4
 8005280:	f7ff ff94 	bl	80051ac <std>
 8005284:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005288:	2201      	movs	r2, #1
 800528a:	2109      	movs	r1, #9
 800528c:	f7ff ff8e 	bl	80051ac <std>
 8005290:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005294:	2202      	movs	r2, #2
 8005296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800529a:	2112      	movs	r1, #18
 800529c:	f7ff bf86 	b.w	80051ac <std>
 80052a0:	20000360 	.word	0x20000360
 80052a4:	20000228 	.word	0x20000228
 80052a8:	08005219 	.word	0x08005219

080052ac <__sfp_lock_acquire>:
 80052ac:	4801      	ldr	r0, [pc, #4]	@ (80052b4 <__sfp_lock_acquire+0x8>)
 80052ae:	f000 b90e 	b.w	80054ce <__retarget_lock_acquire_recursive>
 80052b2:	bf00      	nop
 80052b4:	20000369 	.word	0x20000369

080052b8 <__sfp_lock_release>:
 80052b8:	4801      	ldr	r0, [pc, #4]	@ (80052c0 <__sfp_lock_release+0x8>)
 80052ba:	f000 b909 	b.w	80054d0 <__retarget_lock_release_recursive>
 80052be:	bf00      	nop
 80052c0:	20000369 	.word	0x20000369

080052c4 <__sinit>:
 80052c4:	b510      	push	{r4, lr}
 80052c6:	4604      	mov	r4, r0
 80052c8:	f7ff fff0 	bl	80052ac <__sfp_lock_acquire>
 80052cc:	6a23      	ldr	r3, [r4, #32]
 80052ce:	b11b      	cbz	r3, 80052d8 <__sinit+0x14>
 80052d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d4:	f7ff bff0 	b.w	80052b8 <__sfp_lock_release>
 80052d8:	4b04      	ldr	r3, [pc, #16]	@ (80052ec <__sinit+0x28>)
 80052da:	6223      	str	r3, [r4, #32]
 80052dc:	4b04      	ldr	r3, [pc, #16]	@ (80052f0 <__sinit+0x2c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f5      	bne.n	80052d0 <__sinit+0xc>
 80052e4:	f7ff ffc4 	bl	8005270 <global_stdio_init.part.0>
 80052e8:	e7f2      	b.n	80052d0 <__sinit+0xc>
 80052ea:	bf00      	nop
 80052ec:	08005231 	.word	0x08005231
 80052f0:	20000360 	.word	0x20000360

080052f4 <_fwalk_sglue>:
 80052f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052f8:	4607      	mov	r7, r0
 80052fa:	4688      	mov	r8, r1
 80052fc:	4614      	mov	r4, r2
 80052fe:	2600      	movs	r6, #0
 8005300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005304:	f1b9 0901 	subs.w	r9, r9, #1
 8005308:	d505      	bpl.n	8005316 <_fwalk_sglue+0x22>
 800530a:	6824      	ldr	r4, [r4, #0]
 800530c:	2c00      	cmp	r4, #0
 800530e:	d1f7      	bne.n	8005300 <_fwalk_sglue+0xc>
 8005310:	4630      	mov	r0, r6
 8005312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005316:	89ab      	ldrh	r3, [r5, #12]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d907      	bls.n	800532c <_fwalk_sglue+0x38>
 800531c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005320:	3301      	adds	r3, #1
 8005322:	d003      	beq.n	800532c <_fwalk_sglue+0x38>
 8005324:	4629      	mov	r1, r5
 8005326:	4638      	mov	r0, r7
 8005328:	47c0      	blx	r8
 800532a:	4306      	orrs	r6, r0
 800532c:	3568      	adds	r5, #104	@ 0x68
 800532e:	e7e9      	b.n	8005304 <_fwalk_sglue+0x10>

08005330 <iprintf>:
 8005330:	b40f      	push	{r0, r1, r2, r3}
 8005332:	b507      	push	{r0, r1, r2, lr}
 8005334:	4906      	ldr	r1, [pc, #24]	@ (8005350 <iprintf+0x20>)
 8005336:	ab04      	add	r3, sp, #16
 8005338:	6808      	ldr	r0, [r1, #0]
 800533a:	f853 2b04 	ldr.w	r2, [r3], #4
 800533e:	6881      	ldr	r1, [r0, #8]
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	f000 f9e9 	bl	8005718 <_vfiprintf_r>
 8005346:	b003      	add	sp, #12
 8005348:	f85d eb04 	ldr.w	lr, [sp], #4
 800534c:	b004      	add	sp, #16
 800534e:	4770      	bx	lr
 8005350:	20000018 	.word	0x20000018

08005354 <__sread>:
 8005354:	b510      	push	{r4, lr}
 8005356:	460c      	mov	r4, r1
 8005358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800535c:	f000 f868 	bl	8005430 <_read_r>
 8005360:	2800      	cmp	r0, #0
 8005362:	bfab      	itete	ge
 8005364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005366:	89a3      	ldrhlt	r3, [r4, #12]
 8005368:	181b      	addge	r3, r3, r0
 800536a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800536e:	bfac      	ite	ge
 8005370:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005372:	81a3      	strhlt	r3, [r4, #12]
 8005374:	bd10      	pop	{r4, pc}

08005376 <__swrite>:
 8005376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800537a:	461f      	mov	r7, r3
 800537c:	898b      	ldrh	r3, [r1, #12]
 800537e:	05db      	lsls	r3, r3, #23
 8005380:	4605      	mov	r5, r0
 8005382:	460c      	mov	r4, r1
 8005384:	4616      	mov	r6, r2
 8005386:	d505      	bpl.n	8005394 <__swrite+0x1e>
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	2302      	movs	r3, #2
 800538e:	2200      	movs	r2, #0
 8005390:	f000 f83c 	bl	800540c <_lseek_r>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800539a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800539e:	81a3      	strh	r3, [r4, #12]
 80053a0:	4632      	mov	r2, r6
 80053a2:	463b      	mov	r3, r7
 80053a4:	4628      	mov	r0, r5
 80053a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053aa:	f000 b853 	b.w	8005454 <_write_r>

080053ae <__sseek>:
 80053ae:	b510      	push	{r4, lr}
 80053b0:	460c      	mov	r4, r1
 80053b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b6:	f000 f829 	bl	800540c <_lseek_r>
 80053ba:	1c43      	adds	r3, r0, #1
 80053bc:	89a3      	ldrh	r3, [r4, #12]
 80053be:	bf15      	itete	ne
 80053c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053ca:	81a3      	strheq	r3, [r4, #12]
 80053cc:	bf18      	it	ne
 80053ce:	81a3      	strhne	r3, [r4, #12]
 80053d0:	bd10      	pop	{r4, pc}

080053d2 <__sclose>:
 80053d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053d6:	f000 b809 	b.w	80053ec <_close_r>

080053da <memset>:
 80053da:	4402      	add	r2, r0
 80053dc:	4603      	mov	r3, r0
 80053de:	4293      	cmp	r3, r2
 80053e0:	d100      	bne.n	80053e4 <memset+0xa>
 80053e2:	4770      	bx	lr
 80053e4:	f803 1b01 	strb.w	r1, [r3], #1
 80053e8:	e7f9      	b.n	80053de <memset+0x4>
	...

080053ec <_close_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d06      	ldr	r5, [pc, #24]	@ (8005408 <_close_r+0x1c>)
 80053f0:	2300      	movs	r3, #0
 80053f2:	4604      	mov	r4, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	f7fc f909 	bl	800160e <_close>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_close_r+0x1a>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_close_r+0x1a>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	20000364 	.word	0x20000364

0800540c <_lseek_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4d07      	ldr	r5, [pc, #28]	@ (800542c <_lseek_r+0x20>)
 8005410:	4604      	mov	r4, r0
 8005412:	4608      	mov	r0, r1
 8005414:	4611      	mov	r1, r2
 8005416:	2200      	movs	r2, #0
 8005418:	602a      	str	r2, [r5, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	f7fc f91e 	bl	800165c <_lseek>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_lseek_r+0x1e>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_lseek_r+0x1e>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	20000364 	.word	0x20000364

08005430 <_read_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4d07      	ldr	r5, [pc, #28]	@ (8005450 <_read_r+0x20>)
 8005434:	4604      	mov	r4, r0
 8005436:	4608      	mov	r0, r1
 8005438:	4611      	mov	r1, r2
 800543a:	2200      	movs	r2, #0
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fc f8c8 	bl	80015d4 <_read>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_read_r+0x1e>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_read_r+0x1e>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	20000364 	.word	0x20000364

08005454 <_write_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	@ (8005474 <_write_r+0x20>)
 8005458:	4604      	mov	r4, r0
 800545a:	4608      	mov	r0, r1
 800545c:	4611      	mov	r1, r2
 800545e:	2200      	movs	r2, #0
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fc f950 	bl	8001708 <_write>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_write_r+0x1e>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_write_r+0x1e>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20000364 	.word	0x20000364

08005478 <__errno>:
 8005478:	4b01      	ldr	r3, [pc, #4]	@ (8005480 <__errno+0x8>)
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000018 	.word	0x20000018

08005484 <__libc_init_array>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4d0d      	ldr	r5, [pc, #52]	@ (80054bc <__libc_init_array+0x38>)
 8005488:	4c0d      	ldr	r4, [pc, #52]	@ (80054c0 <__libc_init_array+0x3c>)
 800548a:	1b64      	subs	r4, r4, r5
 800548c:	10a4      	asrs	r4, r4, #2
 800548e:	2600      	movs	r6, #0
 8005490:	42a6      	cmp	r6, r4
 8005492:	d109      	bne.n	80054a8 <__libc_init_array+0x24>
 8005494:	4d0b      	ldr	r5, [pc, #44]	@ (80054c4 <__libc_init_array+0x40>)
 8005496:	4c0c      	ldr	r4, [pc, #48]	@ (80054c8 <__libc_init_array+0x44>)
 8005498:	f000 fdb8 	bl	800600c <_init>
 800549c:	1b64      	subs	r4, r4, r5
 800549e:	10a4      	asrs	r4, r4, #2
 80054a0:	2600      	movs	r6, #0
 80054a2:	42a6      	cmp	r6, r4
 80054a4:	d105      	bne.n	80054b2 <__libc_init_array+0x2e>
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ac:	4798      	blx	r3
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7ee      	b.n	8005490 <__libc_init_array+0xc>
 80054b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b6:	4798      	blx	r3
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7f2      	b.n	80054a2 <__libc_init_array+0x1e>
 80054bc:	08006088 	.word	0x08006088
 80054c0:	08006088 	.word	0x08006088
 80054c4:	08006088 	.word	0x08006088
 80054c8:	0800608c 	.word	0x0800608c

080054cc <__retarget_lock_init_recursive>:
 80054cc:	4770      	bx	lr

080054ce <__retarget_lock_acquire_recursive>:
 80054ce:	4770      	bx	lr

080054d0 <__retarget_lock_release_recursive>:
 80054d0:	4770      	bx	lr
	...

080054d4 <_free_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4605      	mov	r5, r0
 80054d8:	2900      	cmp	r1, #0
 80054da:	d041      	beq.n	8005560 <_free_r+0x8c>
 80054dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e0:	1f0c      	subs	r4, r1, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfb8      	it	lt
 80054e6:	18e4      	addlt	r4, r4, r3
 80054e8:	f000 f8e0 	bl	80056ac <__malloc_lock>
 80054ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005564 <_free_r+0x90>)
 80054ee:	6813      	ldr	r3, [r2, #0]
 80054f0:	b933      	cbnz	r3, 8005500 <_free_r+0x2c>
 80054f2:	6063      	str	r3, [r4, #4]
 80054f4:	6014      	str	r4, [r2, #0]
 80054f6:	4628      	mov	r0, r5
 80054f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054fc:	f000 b8dc 	b.w	80056b8 <__malloc_unlock>
 8005500:	42a3      	cmp	r3, r4
 8005502:	d908      	bls.n	8005516 <_free_r+0x42>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	1821      	adds	r1, r4, r0
 8005508:	428b      	cmp	r3, r1
 800550a:	bf01      	itttt	eq
 800550c:	6819      	ldreq	r1, [r3, #0]
 800550e:	685b      	ldreq	r3, [r3, #4]
 8005510:	1809      	addeq	r1, r1, r0
 8005512:	6021      	streq	r1, [r4, #0]
 8005514:	e7ed      	b.n	80054f2 <_free_r+0x1e>
 8005516:	461a      	mov	r2, r3
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b10b      	cbz	r3, 8005520 <_free_r+0x4c>
 800551c:	42a3      	cmp	r3, r4
 800551e:	d9fa      	bls.n	8005516 <_free_r+0x42>
 8005520:	6811      	ldr	r1, [r2, #0]
 8005522:	1850      	adds	r0, r2, r1
 8005524:	42a0      	cmp	r0, r4
 8005526:	d10b      	bne.n	8005540 <_free_r+0x6c>
 8005528:	6820      	ldr	r0, [r4, #0]
 800552a:	4401      	add	r1, r0
 800552c:	1850      	adds	r0, r2, r1
 800552e:	4283      	cmp	r3, r0
 8005530:	6011      	str	r1, [r2, #0]
 8005532:	d1e0      	bne.n	80054f6 <_free_r+0x22>
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	6053      	str	r3, [r2, #4]
 800553a:	4408      	add	r0, r1
 800553c:	6010      	str	r0, [r2, #0]
 800553e:	e7da      	b.n	80054f6 <_free_r+0x22>
 8005540:	d902      	bls.n	8005548 <_free_r+0x74>
 8005542:	230c      	movs	r3, #12
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	e7d6      	b.n	80054f6 <_free_r+0x22>
 8005548:	6820      	ldr	r0, [r4, #0]
 800554a:	1821      	adds	r1, r4, r0
 800554c:	428b      	cmp	r3, r1
 800554e:	bf04      	itt	eq
 8005550:	6819      	ldreq	r1, [r3, #0]
 8005552:	685b      	ldreq	r3, [r3, #4]
 8005554:	6063      	str	r3, [r4, #4]
 8005556:	bf04      	itt	eq
 8005558:	1809      	addeq	r1, r1, r0
 800555a:	6021      	streq	r1, [r4, #0]
 800555c:	6054      	str	r4, [r2, #4]
 800555e:	e7ca      	b.n	80054f6 <_free_r+0x22>
 8005560:	bd38      	pop	{r3, r4, r5, pc}
 8005562:	bf00      	nop
 8005564:	20000370 	.word	0x20000370

08005568 <sbrk_aligned>:
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	4e0f      	ldr	r6, [pc, #60]	@ (80055a8 <sbrk_aligned+0x40>)
 800556c:	460c      	mov	r4, r1
 800556e:	6831      	ldr	r1, [r6, #0]
 8005570:	4605      	mov	r5, r0
 8005572:	b911      	cbnz	r1, 800557a <sbrk_aligned+0x12>
 8005574:	f000 fcb6 	bl	8005ee4 <_sbrk_r>
 8005578:	6030      	str	r0, [r6, #0]
 800557a:	4621      	mov	r1, r4
 800557c:	4628      	mov	r0, r5
 800557e:	f000 fcb1 	bl	8005ee4 <_sbrk_r>
 8005582:	1c43      	adds	r3, r0, #1
 8005584:	d103      	bne.n	800558e <sbrk_aligned+0x26>
 8005586:	f04f 34ff 	mov.w	r4, #4294967295
 800558a:	4620      	mov	r0, r4
 800558c:	bd70      	pop	{r4, r5, r6, pc}
 800558e:	1cc4      	adds	r4, r0, #3
 8005590:	f024 0403 	bic.w	r4, r4, #3
 8005594:	42a0      	cmp	r0, r4
 8005596:	d0f8      	beq.n	800558a <sbrk_aligned+0x22>
 8005598:	1a21      	subs	r1, r4, r0
 800559a:	4628      	mov	r0, r5
 800559c:	f000 fca2 	bl	8005ee4 <_sbrk_r>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d1f2      	bne.n	800558a <sbrk_aligned+0x22>
 80055a4:	e7ef      	b.n	8005586 <sbrk_aligned+0x1e>
 80055a6:	bf00      	nop
 80055a8:	2000036c 	.word	0x2000036c

080055ac <_malloc_r>:
 80055ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b0:	1ccd      	adds	r5, r1, #3
 80055b2:	f025 0503 	bic.w	r5, r5, #3
 80055b6:	3508      	adds	r5, #8
 80055b8:	2d0c      	cmp	r5, #12
 80055ba:	bf38      	it	cc
 80055bc:	250c      	movcc	r5, #12
 80055be:	2d00      	cmp	r5, #0
 80055c0:	4606      	mov	r6, r0
 80055c2:	db01      	blt.n	80055c8 <_malloc_r+0x1c>
 80055c4:	42a9      	cmp	r1, r5
 80055c6:	d904      	bls.n	80055d2 <_malloc_r+0x26>
 80055c8:	230c      	movs	r3, #12
 80055ca:	6033      	str	r3, [r6, #0]
 80055cc:	2000      	movs	r0, #0
 80055ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056a8 <_malloc_r+0xfc>
 80055d6:	f000 f869 	bl	80056ac <__malloc_lock>
 80055da:	f8d8 3000 	ldr.w	r3, [r8]
 80055de:	461c      	mov	r4, r3
 80055e0:	bb44      	cbnz	r4, 8005634 <_malloc_r+0x88>
 80055e2:	4629      	mov	r1, r5
 80055e4:	4630      	mov	r0, r6
 80055e6:	f7ff ffbf 	bl	8005568 <sbrk_aligned>
 80055ea:	1c43      	adds	r3, r0, #1
 80055ec:	4604      	mov	r4, r0
 80055ee:	d158      	bne.n	80056a2 <_malloc_r+0xf6>
 80055f0:	f8d8 4000 	ldr.w	r4, [r8]
 80055f4:	4627      	mov	r7, r4
 80055f6:	2f00      	cmp	r7, #0
 80055f8:	d143      	bne.n	8005682 <_malloc_r+0xd6>
 80055fa:	2c00      	cmp	r4, #0
 80055fc:	d04b      	beq.n	8005696 <_malloc_r+0xea>
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	4639      	mov	r1, r7
 8005602:	4630      	mov	r0, r6
 8005604:	eb04 0903 	add.w	r9, r4, r3
 8005608:	f000 fc6c 	bl	8005ee4 <_sbrk_r>
 800560c:	4581      	cmp	r9, r0
 800560e:	d142      	bne.n	8005696 <_malloc_r+0xea>
 8005610:	6821      	ldr	r1, [r4, #0]
 8005612:	1a6d      	subs	r5, r5, r1
 8005614:	4629      	mov	r1, r5
 8005616:	4630      	mov	r0, r6
 8005618:	f7ff ffa6 	bl	8005568 <sbrk_aligned>
 800561c:	3001      	adds	r0, #1
 800561e:	d03a      	beq.n	8005696 <_malloc_r+0xea>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	442b      	add	r3, r5
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	f8d8 3000 	ldr.w	r3, [r8]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	bb62      	cbnz	r2, 8005688 <_malloc_r+0xdc>
 800562e:	f8c8 7000 	str.w	r7, [r8]
 8005632:	e00f      	b.n	8005654 <_malloc_r+0xa8>
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	1b52      	subs	r2, r2, r5
 8005638:	d420      	bmi.n	800567c <_malloc_r+0xd0>
 800563a:	2a0b      	cmp	r2, #11
 800563c:	d917      	bls.n	800566e <_malloc_r+0xc2>
 800563e:	1961      	adds	r1, r4, r5
 8005640:	42a3      	cmp	r3, r4
 8005642:	6025      	str	r5, [r4, #0]
 8005644:	bf18      	it	ne
 8005646:	6059      	strne	r1, [r3, #4]
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	bf08      	it	eq
 800564c:	f8c8 1000 	streq.w	r1, [r8]
 8005650:	5162      	str	r2, [r4, r5]
 8005652:	604b      	str	r3, [r1, #4]
 8005654:	4630      	mov	r0, r6
 8005656:	f000 f82f 	bl	80056b8 <__malloc_unlock>
 800565a:	f104 000b 	add.w	r0, r4, #11
 800565e:	1d23      	adds	r3, r4, #4
 8005660:	f020 0007 	bic.w	r0, r0, #7
 8005664:	1ac2      	subs	r2, r0, r3
 8005666:	bf1c      	itt	ne
 8005668:	1a1b      	subne	r3, r3, r0
 800566a:	50a3      	strne	r3, [r4, r2]
 800566c:	e7af      	b.n	80055ce <_malloc_r+0x22>
 800566e:	6862      	ldr	r2, [r4, #4]
 8005670:	42a3      	cmp	r3, r4
 8005672:	bf0c      	ite	eq
 8005674:	f8c8 2000 	streq.w	r2, [r8]
 8005678:	605a      	strne	r2, [r3, #4]
 800567a:	e7eb      	b.n	8005654 <_malloc_r+0xa8>
 800567c:	4623      	mov	r3, r4
 800567e:	6864      	ldr	r4, [r4, #4]
 8005680:	e7ae      	b.n	80055e0 <_malloc_r+0x34>
 8005682:	463c      	mov	r4, r7
 8005684:	687f      	ldr	r7, [r7, #4]
 8005686:	e7b6      	b.n	80055f6 <_malloc_r+0x4a>
 8005688:	461a      	mov	r2, r3
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	42a3      	cmp	r3, r4
 800568e:	d1fb      	bne.n	8005688 <_malloc_r+0xdc>
 8005690:	2300      	movs	r3, #0
 8005692:	6053      	str	r3, [r2, #4]
 8005694:	e7de      	b.n	8005654 <_malloc_r+0xa8>
 8005696:	230c      	movs	r3, #12
 8005698:	6033      	str	r3, [r6, #0]
 800569a:	4630      	mov	r0, r6
 800569c:	f000 f80c 	bl	80056b8 <__malloc_unlock>
 80056a0:	e794      	b.n	80055cc <_malloc_r+0x20>
 80056a2:	6005      	str	r5, [r0, #0]
 80056a4:	e7d6      	b.n	8005654 <_malloc_r+0xa8>
 80056a6:	bf00      	nop
 80056a8:	20000370 	.word	0x20000370

080056ac <__malloc_lock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	@ (80056b4 <__malloc_lock+0x8>)
 80056ae:	f7ff bf0e 	b.w	80054ce <__retarget_lock_acquire_recursive>
 80056b2:	bf00      	nop
 80056b4:	20000368 	.word	0x20000368

080056b8 <__malloc_unlock>:
 80056b8:	4801      	ldr	r0, [pc, #4]	@ (80056c0 <__malloc_unlock+0x8>)
 80056ba:	f7ff bf09 	b.w	80054d0 <__retarget_lock_release_recursive>
 80056be:	bf00      	nop
 80056c0:	20000368 	.word	0x20000368

080056c4 <__sfputc_r>:
 80056c4:	6893      	ldr	r3, [r2, #8]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	b410      	push	{r4}
 80056cc:	6093      	str	r3, [r2, #8]
 80056ce:	da08      	bge.n	80056e2 <__sfputc_r+0x1e>
 80056d0:	6994      	ldr	r4, [r2, #24]
 80056d2:	42a3      	cmp	r3, r4
 80056d4:	db01      	blt.n	80056da <__sfputc_r+0x16>
 80056d6:	290a      	cmp	r1, #10
 80056d8:	d103      	bne.n	80056e2 <__sfputc_r+0x1e>
 80056da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056de:	f000 bb6d 	b.w	8005dbc <__swbuf_r>
 80056e2:	6813      	ldr	r3, [r2, #0]
 80056e4:	1c58      	adds	r0, r3, #1
 80056e6:	6010      	str	r0, [r2, #0]
 80056e8:	7019      	strb	r1, [r3, #0]
 80056ea:	4608      	mov	r0, r1
 80056ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <__sfputs_r>:
 80056f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f4:	4606      	mov	r6, r0
 80056f6:	460f      	mov	r7, r1
 80056f8:	4614      	mov	r4, r2
 80056fa:	18d5      	adds	r5, r2, r3
 80056fc:	42ac      	cmp	r4, r5
 80056fe:	d101      	bne.n	8005704 <__sfputs_r+0x12>
 8005700:	2000      	movs	r0, #0
 8005702:	e007      	b.n	8005714 <__sfputs_r+0x22>
 8005704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005708:	463a      	mov	r2, r7
 800570a:	4630      	mov	r0, r6
 800570c:	f7ff ffda 	bl	80056c4 <__sfputc_r>
 8005710:	1c43      	adds	r3, r0, #1
 8005712:	d1f3      	bne.n	80056fc <__sfputs_r+0xa>
 8005714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005718 <_vfiprintf_r>:
 8005718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571c:	460d      	mov	r5, r1
 800571e:	b09d      	sub	sp, #116	@ 0x74
 8005720:	4614      	mov	r4, r2
 8005722:	4698      	mov	r8, r3
 8005724:	4606      	mov	r6, r0
 8005726:	b118      	cbz	r0, 8005730 <_vfiprintf_r+0x18>
 8005728:	6a03      	ldr	r3, [r0, #32]
 800572a:	b90b      	cbnz	r3, 8005730 <_vfiprintf_r+0x18>
 800572c:	f7ff fdca 	bl	80052c4 <__sinit>
 8005730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005732:	07d9      	lsls	r1, r3, #31
 8005734:	d405      	bmi.n	8005742 <_vfiprintf_r+0x2a>
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	059a      	lsls	r2, r3, #22
 800573a:	d402      	bmi.n	8005742 <_vfiprintf_r+0x2a>
 800573c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800573e:	f7ff fec6 	bl	80054ce <__retarget_lock_acquire_recursive>
 8005742:	89ab      	ldrh	r3, [r5, #12]
 8005744:	071b      	lsls	r3, r3, #28
 8005746:	d501      	bpl.n	800574c <_vfiprintf_r+0x34>
 8005748:	692b      	ldr	r3, [r5, #16]
 800574a:	b99b      	cbnz	r3, 8005774 <_vfiprintf_r+0x5c>
 800574c:	4629      	mov	r1, r5
 800574e:	4630      	mov	r0, r6
 8005750:	f000 fb72 	bl	8005e38 <__swsetup_r>
 8005754:	b170      	cbz	r0, 8005774 <_vfiprintf_r+0x5c>
 8005756:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005758:	07dc      	lsls	r4, r3, #31
 800575a:	d504      	bpl.n	8005766 <_vfiprintf_r+0x4e>
 800575c:	f04f 30ff 	mov.w	r0, #4294967295
 8005760:	b01d      	add	sp, #116	@ 0x74
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	0598      	lsls	r0, r3, #22
 800576a:	d4f7      	bmi.n	800575c <_vfiprintf_r+0x44>
 800576c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800576e:	f7ff feaf 	bl	80054d0 <__retarget_lock_release_recursive>
 8005772:	e7f3      	b.n	800575c <_vfiprintf_r+0x44>
 8005774:	2300      	movs	r3, #0
 8005776:	9309      	str	r3, [sp, #36]	@ 0x24
 8005778:	2320      	movs	r3, #32
 800577a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800577e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005782:	2330      	movs	r3, #48	@ 0x30
 8005784:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005934 <_vfiprintf_r+0x21c>
 8005788:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800578c:	f04f 0901 	mov.w	r9, #1
 8005790:	4623      	mov	r3, r4
 8005792:	469a      	mov	sl, r3
 8005794:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005798:	b10a      	cbz	r2, 800579e <_vfiprintf_r+0x86>
 800579a:	2a25      	cmp	r2, #37	@ 0x25
 800579c:	d1f9      	bne.n	8005792 <_vfiprintf_r+0x7a>
 800579e:	ebba 0b04 	subs.w	fp, sl, r4
 80057a2:	d00b      	beq.n	80057bc <_vfiprintf_r+0xa4>
 80057a4:	465b      	mov	r3, fp
 80057a6:	4622      	mov	r2, r4
 80057a8:	4629      	mov	r1, r5
 80057aa:	4630      	mov	r0, r6
 80057ac:	f7ff ffa1 	bl	80056f2 <__sfputs_r>
 80057b0:	3001      	adds	r0, #1
 80057b2:	f000 80a7 	beq.w	8005904 <_vfiprintf_r+0x1ec>
 80057b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057b8:	445a      	add	r2, fp
 80057ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80057bc:	f89a 3000 	ldrb.w	r3, [sl]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 809f 	beq.w	8005904 <_vfiprintf_r+0x1ec>
 80057c6:	2300      	movs	r3, #0
 80057c8:	f04f 32ff 	mov.w	r2, #4294967295
 80057cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057d0:	f10a 0a01 	add.w	sl, sl, #1
 80057d4:	9304      	str	r3, [sp, #16]
 80057d6:	9307      	str	r3, [sp, #28]
 80057d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80057de:	4654      	mov	r4, sl
 80057e0:	2205      	movs	r2, #5
 80057e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e6:	4853      	ldr	r0, [pc, #332]	@ (8005934 <_vfiprintf_r+0x21c>)
 80057e8:	f7fa fcfa 	bl	80001e0 <memchr>
 80057ec:	9a04      	ldr	r2, [sp, #16]
 80057ee:	b9d8      	cbnz	r0, 8005828 <_vfiprintf_r+0x110>
 80057f0:	06d1      	lsls	r1, r2, #27
 80057f2:	bf44      	itt	mi
 80057f4:	2320      	movmi	r3, #32
 80057f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057fa:	0713      	lsls	r3, r2, #28
 80057fc:	bf44      	itt	mi
 80057fe:	232b      	movmi	r3, #43	@ 0x2b
 8005800:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005804:	f89a 3000 	ldrb.w	r3, [sl]
 8005808:	2b2a      	cmp	r3, #42	@ 0x2a
 800580a:	d015      	beq.n	8005838 <_vfiprintf_r+0x120>
 800580c:	9a07      	ldr	r2, [sp, #28]
 800580e:	4654      	mov	r4, sl
 8005810:	2000      	movs	r0, #0
 8005812:	f04f 0c0a 	mov.w	ip, #10
 8005816:	4621      	mov	r1, r4
 8005818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800581c:	3b30      	subs	r3, #48	@ 0x30
 800581e:	2b09      	cmp	r3, #9
 8005820:	d94b      	bls.n	80058ba <_vfiprintf_r+0x1a2>
 8005822:	b1b0      	cbz	r0, 8005852 <_vfiprintf_r+0x13a>
 8005824:	9207      	str	r2, [sp, #28]
 8005826:	e014      	b.n	8005852 <_vfiprintf_r+0x13a>
 8005828:	eba0 0308 	sub.w	r3, r0, r8
 800582c:	fa09 f303 	lsl.w	r3, r9, r3
 8005830:	4313      	orrs	r3, r2
 8005832:	9304      	str	r3, [sp, #16]
 8005834:	46a2      	mov	sl, r4
 8005836:	e7d2      	b.n	80057de <_vfiprintf_r+0xc6>
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	1d19      	adds	r1, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	9103      	str	r1, [sp, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	bfbb      	ittet	lt
 8005844:	425b      	neglt	r3, r3
 8005846:	f042 0202 	orrlt.w	r2, r2, #2
 800584a:	9307      	strge	r3, [sp, #28]
 800584c:	9307      	strlt	r3, [sp, #28]
 800584e:	bfb8      	it	lt
 8005850:	9204      	strlt	r2, [sp, #16]
 8005852:	7823      	ldrb	r3, [r4, #0]
 8005854:	2b2e      	cmp	r3, #46	@ 0x2e
 8005856:	d10a      	bne.n	800586e <_vfiprintf_r+0x156>
 8005858:	7863      	ldrb	r3, [r4, #1]
 800585a:	2b2a      	cmp	r3, #42	@ 0x2a
 800585c:	d132      	bne.n	80058c4 <_vfiprintf_r+0x1ac>
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	1d1a      	adds	r2, r3, #4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	9203      	str	r2, [sp, #12]
 8005866:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800586a:	3402      	adds	r4, #2
 800586c:	9305      	str	r3, [sp, #20]
 800586e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005944 <_vfiprintf_r+0x22c>
 8005872:	7821      	ldrb	r1, [r4, #0]
 8005874:	2203      	movs	r2, #3
 8005876:	4650      	mov	r0, sl
 8005878:	f7fa fcb2 	bl	80001e0 <memchr>
 800587c:	b138      	cbz	r0, 800588e <_vfiprintf_r+0x176>
 800587e:	9b04      	ldr	r3, [sp, #16]
 8005880:	eba0 000a 	sub.w	r0, r0, sl
 8005884:	2240      	movs	r2, #64	@ 0x40
 8005886:	4082      	lsls	r2, r0
 8005888:	4313      	orrs	r3, r2
 800588a:	3401      	adds	r4, #1
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005892:	4829      	ldr	r0, [pc, #164]	@ (8005938 <_vfiprintf_r+0x220>)
 8005894:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005898:	2206      	movs	r2, #6
 800589a:	f7fa fca1 	bl	80001e0 <memchr>
 800589e:	2800      	cmp	r0, #0
 80058a0:	d03f      	beq.n	8005922 <_vfiprintf_r+0x20a>
 80058a2:	4b26      	ldr	r3, [pc, #152]	@ (800593c <_vfiprintf_r+0x224>)
 80058a4:	bb1b      	cbnz	r3, 80058ee <_vfiprintf_r+0x1d6>
 80058a6:	9b03      	ldr	r3, [sp, #12]
 80058a8:	3307      	adds	r3, #7
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	3308      	adds	r3, #8
 80058b0:	9303      	str	r3, [sp, #12]
 80058b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058b4:	443b      	add	r3, r7
 80058b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80058b8:	e76a      	b.n	8005790 <_vfiprintf_r+0x78>
 80058ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80058be:	460c      	mov	r4, r1
 80058c0:	2001      	movs	r0, #1
 80058c2:	e7a8      	b.n	8005816 <_vfiprintf_r+0xfe>
 80058c4:	2300      	movs	r3, #0
 80058c6:	3401      	adds	r4, #1
 80058c8:	9305      	str	r3, [sp, #20]
 80058ca:	4619      	mov	r1, r3
 80058cc:	f04f 0c0a 	mov.w	ip, #10
 80058d0:	4620      	mov	r0, r4
 80058d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058d6:	3a30      	subs	r2, #48	@ 0x30
 80058d8:	2a09      	cmp	r2, #9
 80058da:	d903      	bls.n	80058e4 <_vfiprintf_r+0x1cc>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0c6      	beq.n	800586e <_vfiprintf_r+0x156>
 80058e0:	9105      	str	r1, [sp, #20]
 80058e2:	e7c4      	b.n	800586e <_vfiprintf_r+0x156>
 80058e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80058e8:	4604      	mov	r4, r0
 80058ea:	2301      	movs	r3, #1
 80058ec:	e7f0      	b.n	80058d0 <_vfiprintf_r+0x1b8>
 80058ee:	ab03      	add	r3, sp, #12
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	462a      	mov	r2, r5
 80058f4:	4b12      	ldr	r3, [pc, #72]	@ (8005940 <_vfiprintf_r+0x228>)
 80058f6:	a904      	add	r1, sp, #16
 80058f8:	4630      	mov	r0, r6
 80058fa:	f3af 8000 	nop.w
 80058fe:	4607      	mov	r7, r0
 8005900:	1c78      	adds	r0, r7, #1
 8005902:	d1d6      	bne.n	80058b2 <_vfiprintf_r+0x19a>
 8005904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005906:	07d9      	lsls	r1, r3, #31
 8005908:	d405      	bmi.n	8005916 <_vfiprintf_r+0x1fe>
 800590a:	89ab      	ldrh	r3, [r5, #12]
 800590c:	059a      	lsls	r2, r3, #22
 800590e:	d402      	bmi.n	8005916 <_vfiprintf_r+0x1fe>
 8005910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005912:	f7ff fddd 	bl	80054d0 <__retarget_lock_release_recursive>
 8005916:	89ab      	ldrh	r3, [r5, #12]
 8005918:	065b      	lsls	r3, r3, #25
 800591a:	f53f af1f 	bmi.w	800575c <_vfiprintf_r+0x44>
 800591e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005920:	e71e      	b.n	8005760 <_vfiprintf_r+0x48>
 8005922:	ab03      	add	r3, sp, #12
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	462a      	mov	r2, r5
 8005928:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <_vfiprintf_r+0x228>)
 800592a:	a904      	add	r1, sp, #16
 800592c:	4630      	mov	r0, r6
 800592e:	f000 f879 	bl	8005a24 <_printf_i>
 8005932:	e7e4      	b.n	80058fe <_vfiprintf_r+0x1e6>
 8005934:	0800604c 	.word	0x0800604c
 8005938:	08006056 	.word	0x08006056
 800593c:	00000000 	.word	0x00000000
 8005940:	080056f3 	.word	0x080056f3
 8005944:	08006052 	.word	0x08006052

08005948 <_printf_common>:
 8005948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	4616      	mov	r6, r2
 800594e:	4698      	mov	r8, r3
 8005950:	688a      	ldr	r2, [r1, #8]
 8005952:	690b      	ldr	r3, [r1, #16]
 8005954:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005958:	4293      	cmp	r3, r2
 800595a:	bfb8      	it	lt
 800595c:	4613      	movlt	r3, r2
 800595e:	6033      	str	r3, [r6, #0]
 8005960:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005964:	4607      	mov	r7, r0
 8005966:	460c      	mov	r4, r1
 8005968:	b10a      	cbz	r2, 800596e <_printf_common+0x26>
 800596a:	3301      	adds	r3, #1
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	0699      	lsls	r1, r3, #26
 8005972:	bf42      	ittt	mi
 8005974:	6833      	ldrmi	r3, [r6, #0]
 8005976:	3302      	addmi	r3, #2
 8005978:	6033      	strmi	r3, [r6, #0]
 800597a:	6825      	ldr	r5, [r4, #0]
 800597c:	f015 0506 	ands.w	r5, r5, #6
 8005980:	d106      	bne.n	8005990 <_printf_common+0x48>
 8005982:	f104 0a19 	add.w	sl, r4, #25
 8005986:	68e3      	ldr	r3, [r4, #12]
 8005988:	6832      	ldr	r2, [r6, #0]
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	42ab      	cmp	r3, r5
 800598e:	dc26      	bgt.n	80059de <_printf_common+0x96>
 8005990:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005994:	6822      	ldr	r2, [r4, #0]
 8005996:	3b00      	subs	r3, #0
 8005998:	bf18      	it	ne
 800599a:	2301      	movne	r3, #1
 800599c:	0692      	lsls	r2, r2, #26
 800599e:	d42b      	bmi.n	80059f8 <_printf_common+0xb0>
 80059a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059a4:	4641      	mov	r1, r8
 80059a6:	4638      	mov	r0, r7
 80059a8:	47c8      	blx	r9
 80059aa:	3001      	adds	r0, #1
 80059ac:	d01e      	beq.n	80059ec <_printf_common+0xa4>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	6922      	ldr	r2, [r4, #16]
 80059b2:	f003 0306 	and.w	r3, r3, #6
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	bf02      	ittt	eq
 80059ba:	68e5      	ldreq	r5, [r4, #12]
 80059bc:	6833      	ldreq	r3, [r6, #0]
 80059be:	1aed      	subeq	r5, r5, r3
 80059c0:	68a3      	ldr	r3, [r4, #8]
 80059c2:	bf0c      	ite	eq
 80059c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059c8:	2500      	movne	r5, #0
 80059ca:	4293      	cmp	r3, r2
 80059cc:	bfc4      	itt	gt
 80059ce:	1a9b      	subgt	r3, r3, r2
 80059d0:	18ed      	addgt	r5, r5, r3
 80059d2:	2600      	movs	r6, #0
 80059d4:	341a      	adds	r4, #26
 80059d6:	42b5      	cmp	r5, r6
 80059d8:	d11a      	bne.n	8005a10 <_printf_common+0xc8>
 80059da:	2000      	movs	r0, #0
 80059dc:	e008      	b.n	80059f0 <_printf_common+0xa8>
 80059de:	2301      	movs	r3, #1
 80059e0:	4652      	mov	r2, sl
 80059e2:	4641      	mov	r1, r8
 80059e4:	4638      	mov	r0, r7
 80059e6:	47c8      	blx	r9
 80059e8:	3001      	adds	r0, #1
 80059ea:	d103      	bne.n	80059f4 <_printf_common+0xac>
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f4:	3501      	adds	r5, #1
 80059f6:	e7c6      	b.n	8005986 <_printf_common+0x3e>
 80059f8:	18e1      	adds	r1, r4, r3
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	2030      	movs	r0, #48	@ 0x30
 80059fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a02:	4422      	add	r2, r4
 8005a04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	e7c7      	b.n	80059a0 <_printf_common+0x58>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4622      	mov	r2, r4
 8005a14:	4641      	mov	r1, r8
 8005a16:	4638      	mov	r0, r7
 8005a18:	47c8      	blx	r9
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d0e6      	beq.n	80059ec <_printf_common+0xa4>
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7d9      	b.n	80059d6 <_printf_common+0x8e>
	...

08005a24 <_printf_i>:
 8005a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	7e0f      	ldrb	r7, [r1, #24]
 8005a2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a2c:	2f78      	cmp	r7, #120	@ 0x78
 8005a2e:	4691      	mov	r9, r2
 8005a30:	4680      	mov	r8, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	469a      	mov	sl, r3
 8005a36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a3a:	d807      	bhi.n	8005a4c <_printf_i+0x28>
 8005a3c:	2f62      	cmp	r7, #98	@ 0x62
 8005a3e:	d80a      	bhi.n	8005a56 <_printf_i+0x32>
 8005a40:	2f00      	cmp	r7, #0
 8005a42:	f000 80d2 	beq.w	8005bea <_printf_i+0x1c6>
 8005a46:	2f58      	cmp	r7, #88	@ 0x58
 8005a48:	f000 80b9 	beq.w	8005bbe <_printf_i+0x19a>
 8005a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a54:	e03a      	b.n	8005acc <_printf_i+0xa8>
 8005a56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a5a:	2b15      	cmp	r3, #21
 8005a5c:	d8f6      	bhi.n	8005a4c <_printf_i+0x28>
 8005a5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a64 <_printf_i+0x40>)
 8005a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005ad1 	.word	0x08005ad1
 8005a6c:	08005a4d 	.word	0x08005a4d
 8005a70:	08005a4d 	.word	0x08005a4d
 8005a74:	08005a4d 	.word	0x08005a4d
 8005a78:	08005a4d 	.word	0x08005a4d
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005a4d 	.word	0x08005a4d
 8005a84:	08005a4d 	.word	0x08005a4d
 8005a88:	08005a4d 	.word	0x08005a4d
 8005a8c:	08005a4d 	.word	0x08005a4d
 8005a90:	08005bd1 	.word	0x08005bd1
 8005a94:	08005afb 	.word	0x08005afb
 8005a98:	08005b8b 	.word	0x08005b8b
 8005a9c:	08005a4d 	.word	0x08005a4d
 8005aa0:	08005a4d 	.word	0x08005a4d
 8005aa4:	08005bf3 	.word	0x08005bf3
 8005aa8:	08005a4d 	.word	0x08005a4d
 8005aac:	08005afb 	.word	0x08005afb
 8005ab0:	08005a4d 	.word	0x08005a4d
 8005ab4:	08005a4d 	.word	0x08005a4d
 8005ab8:	08005b93 	.word	0x08005b93
 8005abc:	6833      	ldr	r3, [r6, #0]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	6032      	str	r2, [r6, #0]
 8005ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005acc:	2301      	movs	r3, #1
 8005ace:	e09d      	b.n	8005c0c <_printf_i+0x1e8>
 8005ad0:	6833      	ldr	r3, [r6, #0]
 8005ad2:	6820      	ldr	r0, [r4, #0]
 8005ad4:	1d19      	adds	r1, r3, #4
 8005ad6:	6031      	str	r1, [r6, #0]
 8005ad8:	0606      	lsls	r6, r0, #24
 8005ada:	d501      	bpl.n	8005ae0 <_printf_i+0xbc>
 8005adc:	681d      	ldr	r5, [r3, #0]
 8005ade:	e003      	b.n	8005ae8 <_printf_i+0xc4>
 8005ae0:	0645      	lsls	r5, r0, #25
 8005ae2:	d5fb      	bpl.n	8005adc <_printf_i+0xb8>
 8005ae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ae8:	2d00      	cmp	r5, #0
 8005aea:	da03      	bge.n	8005af4 <_printf_i+0xd0>
 8005aec:	232d      	movs	r3, #45	@ 0x2d
 8005aee:	426d      	negs	r5, r5
 8005af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005af4:	4859      	ldr	r0, [pc, #356]	@ (8005c5c <_printf_i+0x238>)
 8005af6:	230a      	movs	r3, #10
 8005af8:	e011      	b.n	8005b1e <_printf_i+0xfa>
 8005afa:	6821      	ldr	r1, [r4, #0]
 8005afc:	6833      	ldr	r3, [r6, #0]
 8005afe:	0608      	lsls	r0, r1, #24
 8005b00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b04:	d402      	bmi.n	8005b0c <_printf_i+0xe8>
 8005b06:	0649      	lsls	r1, r1, #25
 8005b08:	bf48      	it	mi
 8005b0a:	b2ad      	uxthmi	r5, r5
 8005b0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b0e:	4853      	ldr	r0, [pc, #332]	@ (8005c5c <_printf_i+0x238>)
 8005b10:	6033      	str	r3, [r6, #0]
 8005b12:	bf14      	ite	ne
 8005b14:	230a      	movne	r3, #10
 8005b16:	2308      	moveq	r3, #8
 8005b18:	2100      	movs	r1, #0
 8005b1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b1e:	6866      	ldr	r6, [r4, #4]
 8005b20:	60a6      	str	r6, [r4, #8]
 8005b22:	2e00      	cmp	r6, #0
 8005b24:	bfa2      	ittt	ge
 8005b26:	6821      	ldrge	r1, [r4, #0]
 8005b28:	f021 0104 	bicge.w	r1, r1, #4
 8005b2c:	6021      	strge	r1, [r4, #0]
 8005b2e:	b90d      	cbnz	r5, 8005b34 <_printf_i+0x110>
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	d04b      	beq.n	8005bcc <_printf_i+0x1a8>
 8005b34:	4616      	mov	r6, r2
 8005b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8005b3e:	5dc7      	ldrb	r7, [r0, r7]
 8005b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b44:	462f      	mov	r7, r5
 8005b46:	42bb      	cmp	r3, r7
 8005b48:	460d      	mov	r5, r1
 8005b4a:	d9f4      	bls.n	8005b36 <_printf_i+0x112>
 8005b4c:	2b08      	cmp	r3, #8
 8005b4e:	d10b      	bne.n	8005b68 <_printf_i+0x144>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	07df      	lsls	r7, r3, #31
 8005b54:	d508      	bpl.n	8005b68 <_printf_i+0x144>
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	6861      	ldr	r1, [r4, #4]
 8005b5a:	4299      	cmp	r1, r3
 8005b5c:	bfde      	ittt	le
 8005b5e:	2330      	movle	r3, #48	@ 0x30
 8005b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b68:	1b92      	subs	r2, r2, r6
 8005b6a:	6122      	str	r2, [r4, #16]
 8005b6c:	f8cd a000 	str.w	sl, [sp]
 8005b70:	464b      	mov	r3, r9
 8005b72:	aa03      	add	r2, sp, #12
 8005b74:	4621      	mov	r1, r4
 8005b76:	4640      	mov	r0, r8
 8005b78:	f7ff fee6 	bl	8005948 <_printf_common>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d14a      	bne.n	8005c16 <_printf_i+0x1f2>
 8005b80:	f04f 30ff 	mov.w	r0, #4294967295
 8005b84:	b004      	add	sp, #16
 8005b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	4833      	ldr	r0, [pc, #204]	@ (8005c60 <_printf_i+0x23c>)
 8005b94:	2778      	movs	r7, #120	@ 0x78
 8005b96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	6831      	ldr	r1, [r6, #0]
 8005b9e:	061f      	lsls	r7, r3, #24
 8005ba0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ba4:	d402      	bmi.n	8005bac <_printf_i+0x188>
 8005ba6:	065f      	lsls	r7, r3, #25
 8005ba8:	bf48      	it	mi
 8005baa:	b2ad      	uxthmi	r5, r5
 8005bac:	6031      	str	r1, [r6, #0]
 8005bae:	07d9      	lsls	r1, r3, #31
 8005bb0:	bf44      	itt	mi
 8005bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8005bb6:	6023      	strmi	r3, [r4, #0]
 8005bb8:	b11d      	cbz	r5, 8005bc2 <_printf_i+0x19e>
 8005bba:	2310      	movs	r3, #16
 8005bbc:	e7ac      	b.n	8005b18 <_printf_i+0xf4>
 8005bbe:	4827      	ldr	r0, [pc, #156]	@ (8005c5c <_printf_i+0x238>)
 8005bc0:	e7e9      	b.n	8005b96 <_printf_i+0x172>
 8005bc2:	6823      	ldr	r3, [r4, #0]
 8005bc4:	f023 0320 	bic.w	r3, r3, #32
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	e7f6      	b.n	8005bba <_printf_i+0x196>
 8005bcc:	4616      	mov	r6, r2
 8005bce:	e7bd      	b.n	8005b4c <_printf_i+0x128>
 8005bd0:	6833      	ldr	r3, [r6, #0]
 8005bd2:	6825      	ldr	r5, [r4, #0]
 8005bd4:	6961      	ldr	r1, [r4, #20]
 8005bd6:	1d18      	adds	r0, r3, #4
 8005bd8:	6030      	str	r0, [r6, #0]
 8005bda:	062e      	lsls	r6, r5, #24
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	d501      	bpl.n	8005be4 <_printf_i+0x1c0>
 8005be0:	6019      	str	r1, [r3, #0]
 8005be2:	e002      	b.n	8005bea <_printf_i+0x1c6>
 8005be4:	0668      	lsls	r0, r5, #25
 8005be6:	d5fb      	bpl.n	8005be0 <_printf_i+0x1bc>
 8005be8:	8019      	strh	r1, [r3, #0]
 8005bea:	2300      	movs	r3, #0
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	4616      	mov	r6, r2
 8005bf0:	e7bc      	b.n	8005b6c <_printf_i+0x148>
 8005bf2:	6833      	ldr	r3, [r6, #0]
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	6032      	str	r2, [r6, #0]
 8005bf8:	681e      	ldr	r6, [r3, #0]
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	2100      	movs	r1, #0
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f7fa faee 	bl	80001e0 <memchr>
 8005c04:	b108      	cbz	r0, 8005c0a <_printf_i+0x1e6>
 8005c06:	1b80      	subs	r0, r0, r6
 8005c08:	6060      	str	r0, [r4, #4]
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c14:	e7aa      	b.n	8005b6c <_printf_i+0x148>
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	4632      	mov	r2, r6
 8005c1a:	4649      	mov	r1, r9
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	47d0      	blx	sl
 8005c20:	3001      	adds	r0, #1
 8005c22:	d0ad      	beq.n	8005b80 <_printf_i+0x15c>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	079b      	lsls	r3, r3, #30
 8005c28:	d413      	bmi.n	8005c52 <_printf_i+0x22e>
 8005c2a:	68e0      	ldr	r0, [r4, #12]
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	4298      	cmp	r0, r3
 8005c30:	bfb8      	it	lt
 8005c32:	4618      	movlt	r0, r3
 8005c34:	e7a6      	b.n	8005b84 <_printf_i+0x160>
 8005c36:	2301      	movs	r3, #1
 8005c38:	4632      	mov	r2, r6
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	47d0      	blx	sl
 8005c40:	3001      	adds	r0, #1
 8005c42:	d09d      	beq.n	8005b80 <_printf_i+0x15c>
 8005c44:	3501      	adds	r5, #1
 8005c46:	68e3      	ldr	r3, [r4, #12]
 8005c48:	9903      	ldr	r1, [sp, #12]
 8005c4a:	1a5b      	subs	r3, r3, r1
 8005c4c:	42ab      	cmp	r3, r5
 8005c4e:	dcf2      	bgt.n	8005c36 <_printf_i+0x212>
 8005c50:	e7eb      	b.n	8005c2a <_printf_i+0x206>
 8005c52:	2500      	movs	r5, #0
 8005c54:	f104 0619 	add.w	r6, r4, #25
 8005c58:	e7f5      	b.n	8005c46 <_printf_i+0x222>
 8005c5a:	bf00      	nop
 8005c5c:	0800605d 	.word	0x0800605d
 8005c60:	0800606e 	.word	0x0800606e

08005c64 <__sflush_r>:
 8005c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6c:	0716      	lsls	r6, r2, #28
 8005c6e:	4605      	mov	r5, r0
 8005c70:	460c      	mov	r4, r1
 8005c72:	d454      	bmi.n	8005d1e <__sflush_r+0xba>
 8005c74:	684b      	ldr	r3, [r1, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	dc02      	bgt.n	8005c80 <__sflush_r+0x1c>
 8005c7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	dd48      	ble.n	8005d12 <__sflush_r+0xae>
 8005c80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c82:	2e00      	cmp	r6, #0
 8005c84:	d045      	beq.n	8005d12 <__sflush_r+0xae>
 8005c86:	2300      	movs	r3, #0
 8005c88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c8c:	682f      	ldr	r7, [r5, #0]
 8005c8e:	6a21      	ldr	r1, [r4, #32]
 8005c90:	602b      	str	r3, [r5, #0]
 8005c92:	d030      	beq.n	8005cf6 <__sflush_r+0x92>
 8005c94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	0759      	lsls	r1, r3, #29
 8005c9a:	d505      	bpl.n	8005ca8 <__sflush_r+0x44>
 8005c9c:	6863      	ldr	r3, [r4, #4]
 8005c9e:	1ad2      	subs	r2, r2, r3
 8005ca0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ca2:	b10b      	cbz	r3, 8005ca8 <__sflush_r+0x44>
 8005ca4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ca6:	1ad2      	subs	r2, r2, r3
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cac:	6a21      	ldr	r1, [r4, #32]
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b0      	blx	r6
 8005cb2:	1c43      	adds	r3, r0, #1
 8005cb4:	89a3      	ldrh	r3, [r4, #12]
 8005cb6:	d106      	bne.n	8005cc6 <__sflush_r+0x62>
 8005cb8:	6829      	ldr	r1, [r5, #0]
 8005cba:	291d      	cmp	r1, #29
 8005cbc:	d82b      	bhi.n	8005d16 <__sflush_r+0xb2>
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	@ (8005d68 <__sflush_r+0x104>)
 8005cc0:	410a      	asrs	r2, r1
 8005cc2:	07d6      	lsls	r6, r2, #31
 8005cc4:	d427      	bmi.n	8005d16 <__sflush_r+0xb2>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	6062      	str	r2, [r4, #4]
 8005cca:	04d9      	lsls	r1, r3, #19
 8005ccc:	6922      	ldr	r2, [r4, #16]
 8005cce:	6022      	str	r2, [r4, #0]
 8005cd0:	d504      	bpl.n	8005cdc <__sflush_r+0x78>
 8005cd2:	1c42      	adds	r2, r0, #1
 8005cd4:	d101      	bne.n	8005cda <__sflush_r+0x76>
 8005cd6:	682b      	ldr	r3, [r5, #0]
 8005cd8:	b903      	cbnz	r3, 8005cdc <__sflush_r+0x78>
 8005cda:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cde:	602f      	str	r7, [r5, #0]
 8005ce0:	b1b9      	cbz	r1, 8005d12 <__sflush_r+0xae>
 8005ce2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ce6:	4299      	cmp	r1, r3
 8005ce8:	d002      	beq.n	8005cf0 <__sflush_r+0x8c>
 8005cea:	4628      	mov	r0, r5
 8005cec:	f7ff fbf2 	bl	80054d4 <_free_r>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cf4:	e00d      	b.n	8005d12 <__sflush_r+0xae>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	47b0      	blx	r6
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	1c50      	adds	r0, r2, #1
 8005d00:	d1c9      	bne.n	8005c96 <__sflush_r+0x32>
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0c6      	beq.n	8005c96 <__sflush_r+0x32>
 8005d08:	2b1d      	cmp	r3, #29
 8005d0a:	d001      	beq.n	8005d10 <__sflush_r+0xac>
 8005d0c:	2b16      	cmp	r3, #22
 8005d0e:	d11e      	bne.n	8005d4e <__sflush_r+0xea>
 8005d10:	602f      	str	r7, [r5, #0]
 8005d12:	2000      	movs	r0, #0
 8005d14:	e022      	b.n	8005d5c <__sflush_r+0xf8>
 8005d16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d1a:	b21b      	sxth	r3, r3
 8005d1c:	e01b      	b.n	8005d56 <__sflush_r+0xf2>
 8005d1e:	690f      	ldr	r7, [r1, #16]
 8005d20:	2f00      	cmp	r7, #0
 8005d22:	d0f6      	beq.n	8005d12 <__sflush_r+0xae>
 8005d24:	0793      	lsls	r3, r2, #30
 8005d26:	680e      	ldr	r6, [r1, #0]
 8005d28:	bf08      	it	eq
 8005d2a:	694b      	ldreq	r3, [r1, #20]
 8005d2c:	600f      	str	r7, [r1, #0]
 8005d2e:	bf18      	it	ne
 8005d30:	2300      	movne	r3, #0
 8005d32:	eba6 0807 	sub.w	r8, r6, r7
 8005d36:	608b      	str	r3, [r1, #8]
 8005d38:	f1b8 0f00 	cmp.w	r8, #0
 8005d3c:	dde9      	ble.n	8005d12 <__sflush_r+0xae>
 8005d3e:	6a21      	ldr	r1, [r4, #32]
 8005d40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d42:	4643      	mov	r3, r8
 8005d44:	463a      	mov	r2, r7
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b0      	blx	r6
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	dc08      	bgt.n	8005d60 <__sflush_r+0xfc>
 8005d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d60:	4407      	add	r7, r0
 8005d62:	eba8 0800 	sub.w	r8, r8, r0
 8005d66:	e7e7      	b.n	8005d38 <__sflush_r+0xd4>
 8005d68:	dfbffffe 	.word	0xdfbffffe

08005d6c <_fflush_r>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	690b      	ldr	r3, [r1, #16]
 8005d70:	4605      	mov	r5, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	b913      	cbnz	r3, 8005d7c <_fflush_r+0x10>
 8005d76:	2500      	movs	r5, #0
 8005d78:	4628      	mov	r0, r5
 8005d7a:	bd38      	pop	{r3, r4, r5, pc}
 8005d7c:	b118      	cbz	r0, 8005d86 <_fflush_r+0x1a>
 8005d7e:	6a03      	ldr	r3, [r0, #32]
 8005d80:	b90b      	cbnz	r3, 8005d86 <_fflush_r+0x1a>
 8005d82:	f7ff fa9f 	bl	80052c4 <__sinit>
 8005d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f3      	beq.n	8005d76 <_fflush_r+0xa>
 8005d8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d90:	07d0      	lsls	r0, r2, #31
 8005d92:	d404      	bmi.n	8005d9e <_fflush_r+0x32>
 8005d94:	0599      	lsls	r1, r3, #22
 8005d96:	d402      	bmi.n	8005d9e <_fflush_r+0x32>
 8005d98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d9a:	f7ff fb98 	bl	80054ce <__retarget_lock_acquire_recursive>
 8005d9e:	4628      	mov	r0, r5
 8005da0:	4621      	mov	r1, r4
 8005da2:	f7ff ff5f 	bl	8005c64 <__sflush_r>
 8005da6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005da8:	07da      	lsls	r2, r3, #31
 8005daa:	4605      	mov	r5, r0
 8005dac:	d4e4      	bmi.n	8005d78 <_fflush_r+0xc>
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	059b      	lsls	r3, r3, #22
 8005db2:	d4e1      	bmi.n	8005d78 <_fflush_r+0xc>
 8005db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005db6:	f7ff fb8b 	bl	80054d0 <__retarget_lock_release_recursive>
 8005dba:	e7dd      	b.n	8005d78 <_fflush_r+0xc>

08005dbc <__swbuf_r>:
 8005dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dbe:	460e      	mov	r6, r1
 8005dc0:	4614      	mov	r4, r2
 8005dc2:	4605      	mov	r5, r0
 8005dc4:	b118      	cbz	r0, 8005dce <__swbuf_r+0x12>
 8005dc6:	6a03      	ldr	r3, [r0, #32]
 8005dc8:	b90b      	cbnz	r3, 8005dce <__swbuf_r+0x12>
 8005dca:	f7ff fa7b 	bl	80052c4 <__sinit>
 8005dce:	69a3      	ldr	r3, [r4, #24]
 8005dd0:	60a3      	str	r3, [r4, #8]
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	071a      	lsls	r2, r3, #28
 8005dd6:	d501      	bpl.n	8005ddc <__swbuf_r+0x20>
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	b943      	cbnz	r3, 8005dee <__swbuf_r+0x32>
 8005ddc:	4621      	mov	r1, r4
 8005dde:	4628      	mov	r0, r5
 8005de0:	f000 f82a 	bl	8005e38 <__swsetup_r>
 8005de4:	b118      	cbz	r0, 8005dee <__swbuf_r+0x32>
 8005de6:	f04f 37ff 	mov.w	r7, #4294967295
 8005dea:	4638      	mov	r0, r7
 8005dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	6922      	ldr	r2, [r4, #16]
 8005df2:	1a98      	subs	r0, r3, r2
 8005df4:	6963      	ldr	r3, [r4, #20]
 8005df6:	b2f6      	uxtb	r6, r6
 8005df8:	4283      	cmp	r3, r0
 8005dfa:	4637      	mov	r7, r6
 8005dfc:	dc05      	bgt.n	8005e0a <__swbuf_r+0x4e>
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4628      	mov	r0, r5
 8005e02:	f7ff ffb3 	bl	8005d6c <_fflush_r>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	d1ed      	bne.n	8005de6 <__swbuf_r+0x2a>
 8005e0a:	68a3      	ldr	r3, [r4, #8]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	60a3      	str	r3, [r4, #8]
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	6022      	str	r2, [r4, #0]
 8005e16:	701e      	strb	r6, [r3, #0]
 8005e18:	6962      	ldr	r2, [r4, #20]
 8005e1a:	1c43      	adds	r3, r0, #1
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d004      	beq.n	8005e2a <__swbuf_r+0x6e>
 8005e20:	89a3      	ldrh	r3, [r4, #12]
 8005e22:	07db      	lsls	r3, r3, #31
 8005e24:	d5e1      	bpl.n	8005dea <__swbuf_r+0x2e>
 8005e26:	2e0a      	cmp	r6, #10
 8005e28:	d1df      	bne.n	8005dea <__swbuf_r+0x2e>
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f7ff ff9d 	bl	8005d6c <_fflush_r>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d0d9      	beq.n	8005dea <__swbuf_r+0x2e>
 8005e36:	e7d6      	b.n	8005de6 <__swbuf_r+0x2a>

08005e38 <__swsetup_r>:
 8005e38:	b538      	push	{r3, r4, r5, lr}
 8005e3a:	4b29      	ldr	r3, [pc, #164]	@ (8005ee0 <__swsetup_r+0xa8>)
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	6818      	ldr	r0, [r3, #0]
 8005e40:	460c      	mov	r4, r1
 8005e42:	b118      	cbz	r0, 8005e4c <__swsetup_r+0x14>
 8005e44:	6a03      	ldr	r3, [r0, #32]
 8005e46:	b90b      	cbnz	r3, 8005e4c <__swsetup_r+0x14>
 8005e48:	f7ff fa3c 	bl	80052c4 <__sinit>
 8005e4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e50:	0719      	lsls	r1, r3, #28
 8005e52:	d422      	bmi.n	8005e9a <__swsetup_r+0x62>
 8005e54:	06da      	lsls	r2, r3, #27
 8005e56:	d407      	bmi.n	8005e68 <__swsetup_r+0x30>
 8005e58:	2209      	movs	r2, #9
 8005e5a:	602a      	str	r2, [r5, #0]
 8005e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	f04f 30ff 	mov.w	r0, #4294967295
 8005e66:	e033      	b.n	8005ed0 <__swsetup_r+0x98>
 8005e68:	0758      	lsls	r0, r3, #29
 8005e6a:	d512      	bpl.n	8005e92 <__swsetup_r+0x5a>
 8005e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e6e:	b141      	cbz	r1, 8005e82 <__swsetup_r+0x4a>
 8005e70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e74:	4299      	cmp	r1, r3
 8005e76:	d002      	beq.n	8005e7e <__swsetup_r+0x46>
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7ff fb2b 	bl	80054d4 <_free_r>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e88:	81a3      	strh	r3, [r4, #12]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	6923      	ldr	r3, [r4, #16]
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	89a3      	ldrh	r3, [r4, #12]
 8005e94:	f043 0308 	orr.w	r3, r3, #8
 8005e98:	81a3      	strh	r3, [r4, #12]
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	b94b      	cbnz	r3, 8005eb2 <__swsetup_r+0x7a>
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ea8:	d003      	beq.n	8005eb2 <__swsetup_r+0x7a>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4628      	mov	r0, r5
 8005eae:	f000 f84f 	bl	8005f50 <__smakebuf_r>
 8005eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005eb6:	f013 0201 	ands.w	r2, r3, #1
 8005eba:	d00a      	beq.n	8005ed2 <__swsetup_r+0x9a>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	60a2      	str	r2, [r4, #8]
 8005ec0:	6962      	ldr	r2, [r4, #20]
 8005ec2:	4252      	negs	r2, r2
 8005ec4:	61a2      	str	r2, [r4, #24]
 8005ec6:	6922      	ldr	r2, [r4, #16]
 8005ec8:	b942      	cbnz	r2, 8005edc <__swsetup_r+0xa4>
 8005eca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ece:	d1c5      	bne.n	8005e5c <__swsetup_r+0x24>
 8005ed0:	bd38      	pop	{r3, r4, r5, pc}
 8005ed2:	0799      	lsls	r1, r3, #30
 8005ed4:	bf58      	it	pl
 8005ed6:	6962      	ldrpl	r2, [r4, #20]
 8005ed8:	60a2      	str	r2, [r4, #8]
 8005eda:	e7f4      	b.n	8005ec6 <__swsetup_r+0x8e>
 8005edc:	2000      	movs	r0, #0
 8005ede:	e7f7      	b.n	8005ed0 <__swsetup_r+0x98>
 8005ee0:	20000018 	.word	0x20000018

08005ee4 <_sbrk_r>:
 8005ee4:	b538      	push	{r3, r4, r5, lr}
 8005ee6:	4d06      	ldr	r5, [pc, #24]	@ (8005f00 <_sbrk_r+0x1c>)
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4604      	mov	r4, r0
 8005eec:	4608      	mov	r0, r1
 8005eee:	602b      	str	r3, [r5, #0]
 8005ef0:	f7fb fbc2 	bl	8001678 <_sbrk>
 8005ef4:	1c43      	adds	r3, r0, #1
 8005ef6:	d102      	bne.n	8005efe <_sbrk_r+0x1a>
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	b103      	cbz	r3, 8005efe <_sbrk_r+0x1a>
 8005efc:	6023      	str	r3, [r4, #0]
 8005efe:	bd38      	pop	{r3, r4, r5, pc}
 8005f00:	20000364 	.word	0x20000364

08005f04 <__swhatbuf_r>:
 8005f04:	b570      	push	{r4, r5, r6, lr}
 8005f06:	460c      	mov	r4, r1
 8005f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	b096      	sub	sp, #88	@ 0x58
 8005f10:	4615      	mov	r5, r2
 8005f12:	461e      	mov	r6, r3
 8005f14:	da0d      	bge.n	8005f32 <__swhatbuf_r+0x2e>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	bf14      	ite	ne
 8005f22:	2340      	movne	r3, #64	@ 0x40
 8005f24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f28:	2000      	movs	r0, #0
 8005f2a:	6031      	str	r1, [r6, #0]
 8005f2c:	602b      	str	r3, [r5, #0]
 8005f2e:	b016      	add	sp, #88	@ 0x58
 8005f30:	bd70      	pop	{r4, r5, r6, pc}
 8005f32:	466a      	mov	r2, sp
 8005f34:	f000 f848 	bl	8005fc8 <_fstat_r>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	dbec      	blt.n	8005f16 <__swhatbuf_r+0x12>
 8005f3c:	9901      	ldr	r1, [sp, #4]
 8005f3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f46:	4259      	negs	r1, r3
 8005f48:	4159      	adcs	r1, r3
 8005f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f4e:	e7eb      	b.n	8005f28 <__swhatbuf_r+0x24>

08005f50 <__smakebuf_r>:
 8005f50:	898b      	ldrh	r3, [r1, #12]
 8005f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f54:	079d      	lsls	r5, r3, #30
 8005f56:	4606      	mov	r6, r0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	d507      	bpl.n	8005f6c <__smakebuf_r+0x1c>
 8005f5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f60:	6023      	str	r3, [r4, #0]
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	2301      	movs	r3, #1
 8005f66:	6163      	str	r3, [r4, #20]
 8005f68:	b003      	add	sp, #12
 8005f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6c:	ab01      	add	r3, sp, #4
 8005f6e:	466a      	mov	r2, sp
 8005f70:	f7ff ffc8 	bl	8005f04 <__swhatbuf_r>
 8005f74:	9f00      	ldr	r7, [sp, #0]
 8005f76:	4605      	mov	r5, r0
 8005f78:	4639      	mov	r1, r7
 8005f7a:	4630      	mov	r0, r6
 8005f7c:	f7ff fb16 	bl	80055ac <_malloc_r>
 8005f80:	b948      	cbnz	r0, 8005f96 <__smakebuf_r+0x46>
 8005f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f86:	059a      	lsls	r2, r3, #22
 8005f88:	d4ee      	bmi.n	8005f68 <__smakebuf_r+0x18>
 8005f8a:	f023 0303 	bic.w	r3, r3, #3
 8005f8e:	f043 0302 	orr.w	r3, r3, #2
 8005f92:	81a3      	strh	r3, [r4, #12]
 8005f94:	e7e2      	b.n	8005f5c <__smakebuf_r+0xc>
 8005f96:	89a3      	ldrh	r3, [r4, #12]
 8005f98:	6020      	str	r0, [r4, #0]
 8005f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005fa6:	b15b      	cbz	r3, 8005fc0 <__smakebuf_r+0x70>
 8005fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fac:	4630      	mov	r0, r6
 8005fae:	f000 f81d 	bl	8005fec <_isatty_r>
 8005fb2:	b128      	cbz	r0, 8005fc0 <__smakebuf_r+0x70>
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	f023 0303 	bic.w	r3, r3, #3
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	81a3      	strh	r3, [r4, #12]
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	431d      	orrs	r5, r3
 8005fc4:	81a5      	strh	r5, [r4, #12]
 8005fc6:	e7cf      	b.n	8005f68 <__smakebuf_r+0x18>

08005fc8 <_fstat_r>:
 8005fc8:	b538      	push	{r3, r4, r5, lr}
 8005fca:	4d07      	ldr	r5, [pc, #28]	@ (8005fe8 <_fstat_r+0x20>)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4604      	mov	r4, r0
 8005fd0:	4608      	mov	r0, r1
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	602b      	str	r3, [r5, #0]
 8005fd6:	f7fb fb26 	bl	8001626 <_fstat>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d102      	bne.n	8005fe4 <_fstat_r+0x1c>
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	b103      	cbz	r3, 8005fe4 <_fstat_r+0x1c>
 8005fe2:	6023      	str	r3, [r4, #0]
 8005fe4:	bd38      	pop	{r3, r4, r5, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20000364 	.word	0x20000364

08005fec <_isatty_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d06      	ldr	r5, [pc, #24]	@ (8006008 <_isatty_r+0x1c>)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	f7fb fb25 	bl	8001646 <_isatty>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_isatty_r+0x1a>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_isatty_r+0x1a>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	20000364 	.word	0x20000364

0800600c <_init>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	bf00      	nop
 8006010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006012:	bc08      	pop	{r3}
 8006014:	469e      	mov	lr, r3
 8006016:	4770      	bx	lr

08006018 <_fini>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr
